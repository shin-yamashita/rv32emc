{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u306f\u3058\u3081\u306b \u00b6 \u7d44\u307f\u8fbc\u307f\u306b\u5411\u3051\u305f\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a RISC-V CPU \u30b3\u30a2\u306e\u5b9f\u88c5\u4f8b\u3067\u3042\u308b\u3002 FPGA\u3078\u306e\u5b9f\u88c5\u3092\u884c\u3044\u3001 5th AI Edge Contest \u306e\u8ab2\u984c\u306b\u9069\u7528\u3057\u305f\u3002 \u6982\u8981 \u00b6 RISC-V \u547d\u4ee4\u30bb\u30c3\u30c8\u306e rv32emc \u306b\u6e96\u62e0 E : 16 x 32bit \u6c4e\u7528 registers M : \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e57\u9664\u7b97\u5668 C : \u547d\u4ee4\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u524a\u6e1b\u306e\u305f\u3081\u3001compressed \u547d\u4ee4\u5bfe\u5fdc RTL (System Verilog) \u306b\u3088\u308b\u5b9f\u88c5 5\u6bb5\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 \u547d\u4ee4\u3001\u30c7\u30fc\u30bf \u5206\u96e2\u30d0\u30b9 32bit address range \u5272\u308a\u8fbc\u307f\uff08\uff11\u7cfb\u7d71\uff09 64bit \u30bf\u30a4\u30de\u30fc (mtime) \u53c2\u7167\u898f\u683c \u00b6 The RISC-V Instruction Set Manual Volume I: Unprivileged ISA The RISC-V Instruction Set Manual Volume II: Privileged Architecture \u516c\u958b\u30bd\u30fc\u30b9 \u00b6 rv32emc rv32emc \u251c\u2500\u2500 rv-test/ test programs for logic simulation \u251c\u2500\u2500 rv_core/ rv32emc core RTL sources \u2502 \u251c\u2500\u2500 hdl/ RTL (SystemVerilog) \u2502 \u251c\u2500\u2500 sim/ logic simulation \u2502 \u2514\u2500\u2500 syn/ FPGA synthesis / example design for Arty-A7 \u251c\u2500\u2500 rv_io/ serial I/O source \u251c\u2500\u2500 rvmon/ Monitor program for FPGA debug \u2514\u2500\u2500 rvsim/ ISS sources 5th-AI-Edge-Contest","title":"\u306f\u3058\u3081\u306b"},{"location":"index.html#_1","text":"\u7d44\u307f\u8fbc\u307f\u306b\u5411\u3051\u305f\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a RISC-V CPU \u30b3\u30a2\u306e\u5b9f\u88c5\u4f8b\u3067\u3042\u308b\u3002 FPGA\u3078\u306e\u5b9f\u88c5\u3092\u884c\u3044\u3001 5th AI Edge Contest \u306e\u8ab2\u984c\u306b\u9069\u7528\u3057\u305f\u3002","title":"\u306f\u3058\u3081\u306b"},{"location":"index.html#_2","text":"RISC-V \u547d\u4ee4\u30bb\u30c3\u30c8\u306e rv32emc \u306b\u6e96\u62e0 E : 16 x 32bit \u6c4e\u7528 registers M : \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e57\u9664\u7b97\u5668 C : \u547d\u4ee4\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u524a\u6e1b\u306e\u305f\u3081\u3001compressed \u547d\u4ee4\u5bfe\u5fdc RTL (System Verilog) \u306b\u3088\u308b\u5b9f\u88c5 5\u6bb5\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 \u547d\u4ee4\u3001\u30c7\u30fc\u30bf \u5206\u96e2\u30d0\u30b9 32bit address range \u5272\u308a\u8fbc\u307f\uff08\uff11\u7cfb\u7d71\uff09 64bit \u30bf\u30a4\u30de\u30fc (mtime)","title":"\u6982\u8981"},{"location":"index.html#_3","text":"The RISC-V Instruction Set Manual Volume I: Unprivileged ISA The RISC-V Instruction Set Manual Volume II: Privileged Architecture","title":"\u53c2\u7167\u898f\u683c"},{"location":"index.html#_4","text":"rv32emc rv32emc \u251c\u2500\u2500 rv-test/ test programs for logic simulation \u251c\u2500\u2500 rv_core/ rv32emc core RTL sources \u2502 \u251c\u2500\u2500 hdl/ RTL (SystemVerilog) \u2502 \u251c\u2500\u2500 sim/ logic simulation \u2502 \u2514\u2500\u2500 syn/ FPGA synthesis / example design for Arty-A7 \u251c\u2500\u2500 rv_io/ serial I/O source \u251c\u2500\u2500 rvmon/ Monitor program for FPGA debug \u2514\u2500\u2500 rvsim/ ISS sources 5th-AI-Edge-Contest","title":"\u516c\u958b\u30bd\u30fc\u30b9"},{"location":"10-iss.html","text":"\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf \u00b6 RTL \u5b9f\u88c5\u3092\u884c\u3046\u524d\u306b\u3001\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf(ISS)\u3092\u958b\u767a\u3057\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u7528\u3044\u305f\u3002 CPU \u30b3\u30a2\u958b\u767a\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 CPU\u306e\u30cf\u30fc\u30c9\u69cb\u6210\u3092\u8a2d\u8a08\u3057\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u307e\u3067\u6b63\u78ba\u306b\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u305f ISS \u3092\uff23\u8a00\u8a9e\u3067\u4f5c\u6210 \u2192 ISS \u3067\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c risc-v \u306e\u30af\u30ed\u30b9 gdb \u3067\u306e\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u7d50\u679c(\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9)\u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 ISS \u3092\u30c7\u30d0\u30c3\u30b0 \u4f5c\u6210\u3057\u305f ISS \u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 HDL(SystemVerilog) \u3092\u8a18\u8ff0\u3001ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068 HDL \u306e\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3(xsim) \u7d50\u679c\u3092\u3064\u304d\u5408\u308f\u305b\u3066HDL\u3092\u30c7\u30d0\u30c3\u30b0 ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068\u7a81\u304d\u5408\u308f\u305b\u3057\u3084\u3059\u3044\u5f62\u306e\u30c8\u30ec\u30fc\u30b9\u3092 HDL \u306e $display \u3067\u51fa\u529b\u3057\u30d0\u30b0\u306e\u8ffd\u8de1\u3092\u884c\u3063\u305f \u307e\u305f\u3001ISS \u7528\u306b\u4f5c\u6210\u3057\u305f\u547d\u4ee4\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057\u3066 HDL \u306e\u547d\u4ee4\u30c6\u30fc\u30d6\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u8a18\u8ff0\u30df\u30b9\u306a\u3069\u3092\u9632\u3044\u3060 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6b63\u3057\u3044\u5b9f\u884c\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u5272\u308a\u8fbc\u307f\u6a5f\u69cb\u3092\u5b9f\u88c5 uart \u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u63a5\u7d9a\u3001\u30bf\u30a4\u30de\u30fc(mtime) \u3067\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3001Vivado \u3067\u8ad6\u7406\u5408\u6210\u3092\u884c\u3044FPGA\u306b\u30ed\u30fc\u30c9\u3001\u5b9f\u6a5f\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u3064\u306a\u3044\u3067\u52d5\u4f5c\u78ba\u8a8d \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3067\u3001\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ed\u30fc\u30c9\u3001\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u66f4\u306b\u9577\u6642\u9593\u306e\u52d5\u4f5c\u691c\u8a3c\u3092\u884c\u3046 \u958b\u767a\u3057\u305f ISS (rvsim) \u00b6 source(github) rvsim \u251c\u2500\u2500 RV-insn.ods : RV32 instruction table source \u2502 \u251c\u2500 RV-insn tab \u2192 RV-insn.csv \u2502 \u2514\u2500 c-insn tab \u2192 c-insn.csv \u251c\u2500\u2500 insntab.py : RV-insn.csv to optab.h / rv_dec_insn.sv converter \u251c\u2500\u2500 c-insntab.py : c-insn.csv to c-optab.h / rv_exp_cinsn.sv converter \u251c\u2500\u2500 simcore.c : ISS core \u251c\u2500\u2500 syscall.h : rv32 gcc system call deffs \u251c\u2500\u2500 rvsim.c : main() console command processor \u251c\u2500\u2500 consio.c : console interface \u2514\u2500\u2500 monlib.c : command processor utility (generated files) \u251c\u2500\u2500 optab.h : RV32 instruction table \u251c\u2500\u2500 c-optab.h : Compressed instruction table \u251c\u2500\u2500 rv_dec_insn.sv : decoder RTL \u2514\u2500\u2500 rv_exp_cinsn.sv : c-insn decoder RTL simcore.c \u304c rv_core \u306e\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u672c\u4f53\u3067\u3042\u308b\u3002 \u30ec\u30b8\u30b9\u30bf(flip flop)\u306e\u5165\u529b d \u3068\u3001\u51fa\u529b q \u3092\u6301\u3064\u69cb\u9020\u4f53 reg32 \u306a\u3069\u3092\u5b9a\u7fa9\u3057\u3001\u8ad6\u7406\u6f14\u7b97\u7d50\u679c\u3092 d \u306b\u30bb\u30c3\u30c8\u3057\u3001 clock() \u95a2\u6570\u3067\u5168\u30ec\u30b8\u30b9\u30bf\u306e d\u2192q \u3092\u4e00\u6589\u306b\u884c\u3046\u3053\u3068\u3067\u3001\u56de\u8def\u52d5\u4f5c\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u305f\u3002 typedef struct _reg32 { u32 d; u32 q; } reg32; rvsim.c \u304c ISS \u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3042\u308b\u3002 GNU binutil \u306e libbfd.so \u3092\u7528\u3044\u3066 elf \u30d5\u30a1\u30a4\u30eb\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u3002 rvsim \u306e compile install \u624b\u9806 usage \u00b6 $ rvsim {rv32 executable (elf)} # elf \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002\u307e\u305f\u306f\u8d77\u52d5\u5f8c load \u30b3\u30de\u30f3\u30c9\u3067\u8aad\u307f\u8fbc\u3080\u3002 ======= rvsim ============================================== rv32 processor simulator. load ELF file 'xxx' : RISCV RVC RVE # elf file \u304b\u3089 arch \u3092\u5224\u5225 number_of_symbols = 155 vaddr:0 memsize:10000 _end:333c start:0 rvsim-E> # prompt : rv32e \u306f 'rvsim-E>' \u305d\u306e\u4ed6\u306f 'rvsim-I>' load <file (rv32 executable)> dump <-stk> <addr|label> # \u30e1\u30e2\u30ea\u30c0\u30f3\u30d7\u3000(PgUp/PgDn/Up/Down \u30ad\u30fc\u3067\u30a2\u30c9\u30ec\u30b9\u79fb\u52d5\u3001'q' \u3067\u7d42\u4e86) reg # register file dump run <N cyc|-all> # N cycle(or \u7121\u5236\u9650) \u5b9f\u884c 'q' \u30ad\u30fc\u3067\u4e2d\u65ad cont <N cyc|-all> # \u7d99\u7d9a\u5b9f\u884c trace <N cyc|-all> <-r> <| tee (fn)> # \u5b9f\u884c\u30c8\u30ec\u30fc\u30b9 \uff08| tee \u3067\u30d5\u30a1\u30a4\u30eb\u306b\u30c0\u30f3\u30d7) break <addr|label> <-d|-e (n)> # break point \u8a2d\u5b9a/\u8868\u793a (-d/-e \u3067 disable/enable) info # \u8aad\u307f\u8fbc\u3093\u3060 elf \u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306a\u3069\u8868\u793a header # elf header \u8868\u793a symbol # symbol list (address : symbol name) \u8868\u793a dis <addr|lable> # addr/label \u4ee5\u964d\u306e disassemble list \u8868\u793a {space:next-page q:quit} debug <-r (fn)> <-m (fn)> <-c> # Register / Memory write log \u3092\u6307\u5b9a\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b help <cmd> quit exit rvsim-E> trace command \u5b9f\u884c\u4f8b \u00b6 Enter : 1 cycle \u5b9f\u884c Space : 1 page \u5b9f\u884c 10\u9032\u6570\u5024 : \u6307\u5b9a\u30b5\u30a4\u30af\u30eb\u5b9f\u884c Q : quit rvsim-E> trace ra( 2a) sp( 8000) gp( 33f8) tp( 0) t0( 50) t1( 0) t2( 0) s0( 0) s1( 0) a0( 2c14) a1( 728) a2( 0) a3( 0) a4( 728) a5( 2c14) cnt pc ir opc opr mar mdr mdw rrd1 rrd2 alu rwa rwd rwdat ra(1) sp(2) gp(3) a0(10) a1(11) a2(12) a3(13) s0(8) s1(9) 0 0 ffffffff auipc gp,12288 0 0 -- 0 0 -- -- xx 0 0 3ffffd0 0 0 0 0 0 0 0 1 0 00003197 auipc gp,12288 0 0 -- 0 0 -- -- xx 0 0 3ffffd0 0 0 0 0 0 0 0 2 4 3f818193 addi gp,gp,1016 0 0 -- 0 3000 ADD gp ALU 0 0 3ffffd0 0 0 0 0 0 0 0 3 8 00008117 auipc sp,32768 0 0 -- 3000 3f8 ADD gp ALU 3000 0 3ffffd0 0 0 0 0 0 0 0 4 c ff810113 addi sp,sp,-8 0 0 -- 8 8000 ADD sp ALU 33f8 0 3ffffd0 0 0 0 0 0 0 0 5 10 00000297 auipc t0,0 0 0 -- 8008 fffffff8 ADD sp ALU 8008 0 3ffffd0 3000 0 0 0 0 0 0 6 14 04028293 addi t0,t0,64 0 0 -- 10 0 ADD t0 ALU 8000 0 3ffffd0 33f8 0 0 0 0 0 0 7 18 30529073 csrrw x0,t0,mtvec 0 0 -- 10 40 ADD t0 ALU 10 0 8008 33f8 0 0 0 0 0 0 8 1c 81c18513 addi a0,gp,-2020 0 0 -- 50 0 FLD x0 ALU 50 0 8000 33f8 0 0 0 0 0 0 9 20 f4418593 addi a1,gp,-188 0 0 -- 33f8 fffff81c ADD a0 ALU 0 0 8000 33f8 0 0 0 0 0 0 10 24 8d89 c.sub a1,a1,a0 0 0 -- 33f8 ffffff44 ADD a1 ALU 2c14 0 8000 33f8 0 0 0 0 0 0 11 26 607010ef jal ra,(1e2c) 0 0 -- 333c 2c14 SUB a1 ALU 333c 0 8000 33f8 0 0 0 0 0 0 12 2a 4502 -b- -- 0 0 -- 0 2a S2 ra ALU 728 0 8000 33f8 2c14 0 0 0 0 0 13 1e2c 00357793 andi a5,a0,3 0 0 -- 0 2a S2 -- xx 2a 0 8000 33f8 2c14 333c 0 0 0 0 14 1e30 c7b9 c.beqz a5,x0,(1e7e) 0 0 -- 2c14 3 AND a5 ALU 0 0 8000 33f8 2c14 728 0 0 0 0 15 1e32 fff58713 -b- -- 0 0 -- 0 0 xx x0 -- 0 2a 8000 33f8 2c14 728 0 0 0 0 16 1e7e 87aa c.mv a5,x0,a0 0 0 -- 0 0 xx -- xx 0 2a 8000 33f8 2c14 728 0 0 0 0 17 1e80 872e c.mv a4,x0,a1 0 0 -- 0 2c14 ADD a5 ALU 0 2a 8000 33f8 2c14 728 0 0 0 0 18 1e82 b7f9 c.j x0,(1e50) 0 0 -- 0 728 ADD a4 ALU 2c14 2a 8000 33f8 2c14 728 0 0 0 0 19 1e84 577d -b- -- 0 0 -- 0 1e84 S2 x0 ALU 728 2a 8000 33f8 2c14 728 0 0 0 0 20 1e50 460d c.li a2,x0,3 0 0 -- 0 1e84 S2 -- xx 1e84 2a 8000 33f8 2c14 728 0 0 0 0 21 1e52 86be c.mv a3,x0,a5 0 0 -- 0 3 ADD a2 ALU 0 2a 8000 33f8 2c14 728 0 0 0 0 cnt pc ir opc opr mar mdr mdw rrd1 rrd2 alu rwa rwd rwdat ra(1) sp(2) gp(3) a0(10) a1(11) a2(12) a3(13) s0(8) s1(9) rvsim-E> ('q' \u30ad\u30fc\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u306b\u623b\u308b) run command \u5b9f\u884c\u4f8b (ecc) \u00b6 rvsim-E> r -all reset_pc() *** GF(2^8) Reed Solomon Coding. 12 parity, 6 error correction. : **** No error. ** exit() timer: 0 exit(): 19 Total clock cycles: 1021788 stall - bra: 108623 [10.6%] data: 72042 [ 7.1%] exec: 1768 [ 0.2%] rvsim-E> \u76f4\u63a5\u5b9f\u884c\u4f8b \u00b6 $ rvsim -r ecc reset_pc() *** GF(2^8) Reed Solomon Coding. 12 parity, 6 error correction. : **** No error. ** exit() timer: 0 exit(): 19 Total clock cycles: 1021788 stall - bra: 108623 [10.6%] data: 72042 [ 7.1%] exec: 1768 [ 0.2%]","title":"\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf"},{"location":"10-iss.html#_1","text":"RTL \u5b9f\u88c5\u3092\u884c\u3046\u524d\u306b\u3001\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf(ISS)\u3092\u958b\u767a\u3057\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u7528\u3044\u305f\u3002 CPU \u30b3\u30a2\u958b\u767a\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 CPU\u306e\u30cf\u30fc\u30c9\u69cb\u6210\u3092\u8a2d\u8a08\u3057\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u307e\u3067\u6b63\u78ba\u306b\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u305f ISS \u3092\uff23\u8a00\u8a9e\u3067\u4f5c\u6210 \u2192 ISS \u3067\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c risc-v \u306e\u30af\u30ed\u30b9 gdb \u3067\u306e\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u7d50\u679c(\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9)\u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 ISS \u3092\u30c7\u30d0\u30c3\u30b0 \u4f5c\u6210\u3057\u305f ISS \u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 HDL(SystemVerilog) \u3092\u8a18\u8ff0\u3001ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068 HDL \u306e\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3(xsim) \u7d50\u679c\u3092\u3064\u304d\u5408\u308f\u305b\u3066HDL\u3092\u30c7\u30d0\u30c3\u30b0 ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068\u7a81\u304d\u5408\u308f\u305b\u3057\u3084\u3059\u3044\u5f62\u306e\u30c8\u30ec\u30fc\u30b9\u3092 HDL \u306e $display \u3067\u51fa\u529b\u3057\u30d0\u30b0\u306e\u8ffd\u8de1\u3092\u884c\u3063\u305f \u307e\u305f\u3001ISS \u7528\u306b\u4f5c\u6210\u3057\u305f\u547d\u4ee4\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057\u3066 HDL \u306e\u547d\u4ee4\u30c6\u30fc\u30d6\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u8a18\u8ff0\u30df\u30b9\u306a\u3069\u3092\u9632\u3044\u3060 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6b63\u3057\u3044\u5b9f\u884c\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u5272\u308a\u8fbc\u307f\u6a5f\u69cb\u3092\u5b9f\u88c5 uart \u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u63a5\u7d9a\u3001\u30bf\u30a4\u30de\u30fc(mtime) \u3067\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3001Vivado \u3067\u8ad6\u7406\u5408\u6210\u3092\u884c\u3044FPGA\u306b\u30ed\u30fc\u30c9\u3001\u5b9f\u6a5f\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u3064\u306a\u3044\u3067\u52d5\u4f5c\u78ba\u8a8d \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3067\u3001\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ed\u30fc\u30c9\u3001\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u66f4\u306b\u9577\u6642\u9593\u306e\u52d5\u4f5c\u691c\u8a3c\u3092\u884c\u3046","title":"\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf"},{"location":"10-iss.html#iss-rvsim","text":"source(github) rvsim \u251c\u2500\u2500 RV-insn.ods : RV32 instruction table source \u2502 \u251c\u2500 RV-insn tab \u2192 RV-insn.csv \u2502 \u2514\u2500 c-insn tab \u2192 c-insn.csv \u251c\u2500\u2500 insntab.py : RV-insn.csv to optab.h / rv_dec_insn.sv converter \u251c\u2500\u2500 c-insntab.py : c-insn.csv to c-optab.h / rv_exp_cinsn.sv converter \u251c\u2500\u2500 simcore.c : ISS core \u251c\u2500\u2500 syscall.h : rv32 gcc system call deffs \u251c\u2500\u2500 rvsim.c : main() console command processor \u251c\u2500\u2500 consio.c : console interface \u2514\u2500\u2500 monlib.c : command processor utility (generated files) \u251c\u2500\u2500 optab.h : RV32 instruction table \u251c\u2500\u2500 c-optab.h : Compressed instruction table \u251c\u2500\u2500 rv_dec_insn.sv : decoder RTL \u2514\u2500\u2500 rv_exp_cinsn.sv : c-insn decoder RTL simcore.c \u304c rv_core \u306e\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u672c\u4f53\u3067\u3042\u308b\u3002 \u30ec\u30b8\u30b9\u30bf(flip flop)\u306e\u5165\u529b d \u3068\u3001\u51fa\u529b q \u3092\u6301\u3064\u69cb\u9020\u4f53 reg32 \u306a\u3069\u3092\u5b9a\u7fa9\u3057\u3001\u8ad6\u7406\u6f14\u7b97\u7d50\u679c\u3092 d \u306b\u30bb\u30c3\u30c8\u3057\u3001 clock() \u95a2\u6570\u3067\u5168\u30ec\u30b8\u30b9\u30bf\u306e d\u2192q \u3092\u4e00\u6589\u306b\u884c\u3046\u3053\u3068\u3067\u3001\u56de\u8def\u52d5\u4f5c\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u305f\u3002 typedef struct _reg32 { u32 d; u32 q; } reg32; rvsim.c \u304c ISS \u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3042\u308b\u3002 GNU binutil \u306e libbfd.so \u3092\u7528\u3044\u3066 elf \u30d5\u30a1\u30a4\u30eb\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u3002 rvsim \u306e compile install \u624b\u9806","title":"\u958b\u767a\u3057\u305f ISS (rvsim)"},{"location":"10-iss.html#usage","text":"$ rvsim {rv32 executable (elf)} # elf \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002\u307e\u305f\u306f\u8d77\u52d5\u5f8c load \u30b3\u30de\u30f3\u30c9\u3067\u8aad\u307f\u8fbc\u3080\u3002 ======= rvsim ============================================== rv32 processor simulator. load ELF file 'xxx' : RISCV RVC RVE # elf file \u304b\u3089 arch \u3092\u5224\u5225 number_of_symbols = 155 vaddr:0 memsize:10000 _end:333c start:0 rvsim-E> # prompt : rv32e \u306f 'rvsim-E>' \u305d\u306e\u4ed6\u306f 'rvsim-I>' load <file (rv32 executable)> dump <-stk> <addr|label> # \u30e1\u30e2\u30ea\u30c0\u30f3\u30d7\u3000(PgUp/PgDn/Up/Down \u30ad\u30fc\u3067\u30a2\u30c9\u30ec\u30b9\u79fb\u52d5\u3001'q' \u3067\u7d42\u4e86) reg # register file dump run <N cyc|-all> # N cycle(or \u7121\u5236\u9650) \u5b9f\u884c 'q' \u30ad\u30fc\u3067\u4e2d\u65ad cont <N cyc|-all> # \u7d99\u7d9a\u5b9f\u884c trace <N cyc|-all> <-r> <| tee (fn)> # \u5b9f\u884c\u30c8\u30ec\u30fc\u30b9 \uff08| tee \u3067\u30d5\u30a1\u30a4\u30eb\u306b\u30c0\u30f3\u30d7) break <addr|label> <-d|-e (n)> # break point \u8a2d\u5b9a/\u8868\u793a (-d/-e \u3067 disable/enable) info # \u8aad\u307f\u8fbc\u3093\u3060 elf \u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306a\u3069\u8868\u793a header # elf header \u8868\u793a symbol # symbol list (address : symbol name) \u8868\u793a dis <addr|lable> # addr/label \u4ee5\u964d\u306e disassemble list \u8868\u793a {space:next-page q:quit} debug <-r (fn)> <-m (fn)> <-c> # Register / Memory write log \u3092\u6307\u5b9a\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b help <cmd> quit exit rvsim-E>","title":"usage"},{"location":"10-iss.html#trace-command","text":"Enter : 1 cycle \u5b9f\u884c Space : 1 page \u5b9f\u884c 10\u9032\u6570\u5024 : \u6307\u5b9a\u30b5\u30a4\u30af\u30eb\u5b9f\u884c Q : quit rvsim-E> trace ra( 2a) sp( 8000) gp( 33f8) tp( 0) t0( 50) t1( 0) t2( 0) s0( 0) s1( 0) a0( 2c14) a1( 728) a2( 0) a3( 0) a4( 728) a5( 2c14) cnt pc ir opc opr mar mdr mdw rrd1 rrd2 alu rwa rwd rwdat ra(1) sp(2) gp(3) a0(10) a1(11) a2(12) a3(13) s0(8) s1(9) 0 0 ffffffff auipc gp,12288 0 0 -- 0 0 -- -- xx 0 0 3ffffd0 0 0 0 0 0 0 0 1 0 00003197 auipc gp,12288 0 0 -- 0 0 -- -- xx 0 0 3ffffd0 0 0 0 0 0 0 0 2 4 3f818193 addi gp,gp,1016 0 0 -- 0 3000 ADD gp ALU 0 0 3ffffd0 0 0 0 0 0 0 0 3 8 00008117 auipc sp,32768 0 0 -- 3000 3f8 ADD gp ALU 3000 0 3ffffd0 0 0 0 0 0 0 0 4 c ff810113 addi sp,sp,-8 0 0 -- 8 8000 ADD sp ALU 33f8 0 3ffffd0 0 0 0 0 0 0 0 5 10 00000297 auipc t0,0 0 0 -- 8008 fffffff8 ADD sp ALU 8008 0 3ffffd0 3000 0 0 0 0 0 0 6 14 04028293 addi t0,t0,64 0 0 -- 10 0 ADD t0 ALU 8000 0 3ffffd0 33f8 0 0 0 0 0 0 7 18 30529073 csrrw x0,t0,mtvec 0 0 -- 10 40 ADD t0 ALU 10 0 8008 33f8 0 0 0 0 0 0 8 1c 81c18513 addi a0,gp,-2020 0 0 -- 50 0 FLD x0 ALU 50 0 8000 33f8 0 0 0 0 0 0 9 20 f4418593 addi a1,gp,-188 0 0 -- 33f8 fffff81c ADD a0 ALU 0 0 8000 33f8 0 0 0 0 0 0 10 24 8d89 c.sub a1,a1,a0 0 0 -- 33f8 ffffff44 ADD a1 ALU 2c14 0 8000 33f8 0 0 0 0 0 0 11 26 607010ef jal ra,(1e2c) 0 0 -- 333c 2c14 SUB a1 ALU 333c 0 8000 33f8 0 0 0 0 0 0 12 2a 4502 -b- -- 0 0 -- 0 2a S2 ra ALU 728 0 8000 33f8 2c14 0 0 0 0 0 13 1e2c 00357793 andi a5,a0,3 0 0 -- 0 2a S2 -- xx 2a 0 8000 33f8 2c14 333c 0 0 0 0 14 1e30 c7b9 c.beqz a5,x0,(1e7e) 0 0 -- 2c14 3 AND a5 ALU 0 0 8000 33f8 2c14 728 0 0 0 0 15 1e32 fff58713 -b- -- 0 0 -- 0 0 xx x0 -- 0 2a 8000 33f8 2c14 728 0 0 0 0 16 1e7e 87aa c.mv a5,x0,a0 0 0 -- 0 0 xx -- xx 0 2a 8000 33f8 2c14 728 0 0 0 0 17 1e80 872e c.mv a4,x0,a1 0 0 -- 0 2c14 ADD a5 ALU 0 2a 8000 33f8 2c14 728 0 0 0 0 18 1e82 b7f9 c.j x0,(1e50) 0 0 -- 0 728 ADD a4 ALU 2c14 2a 8000 33f8 2c14 728 0 0 0 0 19 1e84 577d -b- -- 0 0 -- 0 1e84 S2 x0 ALU 728 2a 8000 33f8 2c14 728 0 0 0 0 20 1e50 460d c.li a2,x0,3 0 0 -- 0 1e84 S2 -- xx 1e84 2a 8000 33f8 2c14 728 0 0 0 0 21 1e52 86be c.mv a3,x0,a5 0 0 -- 0 3 ADD a2 ALU 0 2a 8000 33f8 2c14 728 0 0 0 0 cnt pc ir opc opr mar mdr mdw rrd1 rrd2 alu rwa rwd rwdat ra(1) sp(2) gp(3) a0(10) a1(11) a2(12) a3(13) s0(8) s1(9) rvsim-E> ('q' \u30ad\u30fc\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u306b\u623b\u308b)","title":"trace command \u5b9f\u884c\u4f8b"},{"location":"10-iss.html#run-command-ecc","text":"rvsim-E> r -all reset_pc() *** GF(2^8) Reed Solomon Coding. 12 parity, 6 error correction. : **** No error. ** exit() timer: 0 exit(): 19 Total clock cycles: 1021788 stall - bra: 108623 [10.6%] data: 72042 [ 7.1%] exec: 1768 [ 0.2%] rvsim-E>","title":"run command \u5b9f\u884c\u4f8b (ecc)"},{"location":"10-iss.html#_2","text":"$ rvsim -r ecc reset_pc() *** GF(2^8) Reed Solomon Coding. 12 parity, 6 error correction. : **** No error. ** exit() timer: 0 exit(): 19 Total clock cycles: 1021788 stall - bra: 108623 [10.6%] data: 72042 [ 7.1%] exec: 1768 [ 0.2%]","title":"\u76f4\u63a5\u5b9f\u884c\u4f8b"},{"location":"20-rv_core.html","text":"rv_core module \u00b6 rv_core \u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6709\u3059\u308b CPU \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\u3002 FPGA\u306b\u5b9f\u88c5\u3057\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u7528\u3044\u308b\u76ee\u7684\u3067\u3001\u6700\u5c0f\u9650\u306e\u4ed5\u69d8\u3092\u5b9f\u88c5\u3057\u305f\u3002 \u547d\u4ee4\u30d0\u30b9\u3001\u30c7\u30fc\u30bf\u30d0\u30b9 \u5404 address 32bit / data 32bit \u5916\u90e8\u5272\u308a\u8fbc\u307f 1\u7cfb\u7d71 \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u3001\u30bf\u30a4\u30de\u30fc\u30b3\u30f3\u30da\u30a2\u5272\u308a\u8fbc\u307f \u5165\u51fa\u529b \u00b6 typedef logic [ 3 : 0 ] u4_t ; typedef logic [ 31 : 0 ] u32_t ; module rv_core #( parameter debug = 0 ) ( input logic clk , // clock input logic xreset , // 0:\u30ea\u30bb\u30c3\u30c8 // ---- \u547d\u4ee4\u30d0\u30b9 ---- output u32_t i_adr , // address (byte address) input u32_t i_dr , // read data (\u547d\u4ee4) output logic i_re , // read enable input logic i_rdy , // data ready // ---- \u30c7\u30fc\u30bf\u30d0\u30b9 ---- output u32_t d_adr , // address (byte address) input u32_t d_dr , // read data output logic d_re , // read enable output u32_t d_dw , // write data output u4_t d_we , // write enable (byte enable) input logic d_rdy , // data ready input logic d_be , // big endian input logic irq // interrupt request ); Memory map \u00b6 rv_core \u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3067\u3042\u308b\u3002 \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c 0x0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b\u3002 0xFFFF0000 \u756a\u5730\u4ee5\u964d\u3092\u30e1\u30e2\u30ea\u30de\u30c3\u30d7 I/O \u9818\u57df\u3068\u3057\u305f\u3002 \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc(mtime)\u3001\u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf(mtimecmp) \u306f 0xFFFF8000, 0xFFFF8008 \u306b\u914d\u7f6e\u3057\u305f\u3002 Address Description 0x00000000 reset start address \u3000\u3000\uff1a \u547d\u4ee4/\u30c7\u30fc\u30bf\u9818\u57df \u547d\u4ee4\uff1a16bit align / \u30c7\u30fc\u30bf:32bit align 0xFFFF0000 ~ 0xFFFFFFF I/O \u9818\u57df 0xFFFF8000 mtime 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc 0xFFFF8008 mtimecmp 64bit \u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf CSR Control and Status Register \u00b6 ISA\u30de\u30cb\u30e5\u30a2\u30eb vol II \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b CSR \u306e\u3046\u3061\u3001\u4ee5\u4e0b\u306e CSR \u3092\u5b9f\u88c5\u3057\u305f\u3002 \u4e3b\u306b\u30bf\u30a4\u30de\u30fc\u3001\u53ca\u3073\u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u5236\u5fa1\u306b\u7528\u3044\u308b\u3002 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5272\u308a\u8fbc\u307f\u306f\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u3002 Number Privilege Name Description 0x305 MRW mtvec Machine trap-handler base address 0x304 MRW mie Machine interrupt-enable register b11:MEIE b7:MTIE 0x344 MRW mip Machine interrupt pending b11:MEIP b7:MTIP 0x341 MRW mepc Machine exception program counter 0x341 MRW mcause Machine trap cause 0xC01 URO time Timer for rdtime instruction 0xC81 URO timeh Upper 32bits of time (for rdtimeh insn) Symbol Description MRW Machine level read/write URO User level read-only MEIE External interrupt enable MEIP External interrupt pending MTIE timer interrupt enable MTIP timer interrupt pending \u547d\u4ee4/\u30c7\u30fc\u30bf\u30d0\u30b9\u63a5\u7d9a \u00b6 \u547d\u4ee4\u30d0\u30b9\u306f compress \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u300116bit align \u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b \u547d\u4ee4\u30e1\u30e2\u30ea\u306f\u300116bit align \u3067 32bit \u8aad\u307f\u51fa\u3057\u304c\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9\u306f\u30c7\u30fc\u30bf\u30e1\u30e2\u30ea\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u63a5\u7d9a\u3059\u308b 32bit \u30d0\u30b9\u3067\u3042\u308b\u304c\u3001write enable d_we[3:0] \u306b\u3088\u308a\u3001byte/16bit/32bit \u30a2\u30af\u30bb\u30b9\u3092\u884c\u3046\u3002 read \u6642\u3082\u3001\u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306b\u5fdc\u3058\u3066 32bit \u30c7\u30fc\u30bf\u306e\u5fc5\u8981\u306a byte \u3092\u53d6\u308a\u8fbc\u3080\u3002 32bit \u30c7\u30fc\u30bf\u5185\u306e\u30d0\u30a4\u30c8\u30a2\u30af\u30bb\u30b9\u9806\u306f little endian \u3067\u3042\u308b\u304c\u3001d_be \u4fe1\u53f7\u3092 assert \u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001 big endian \u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 read / write \u5404 1 clock cycle \u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u304c\u3001rdy \u4fe1\u53f7\u3092\u4efb\u610f\u30b5\u30a4\u30af\u30eb de-assert \u3059\u308b\u3053\u3068\u3067 cycle \u3092\u5ef6\u9577\u3067\u304d\u308b bus timing \u00b6 \u547d\u4ee4\u30d0\u30b9 read timing i_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001i_adr \u306b\u5bfe\u5fdc\u3059\u308b\u547d\u4ee4\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 i_dr \u306b\u8fd4\u3059\u3002 i_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 i_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9 write timing d_we[3:0] \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u30d0\u30a4\u30c8\u306b d_dw \u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u3002 d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b\u3002 d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9 read timing d_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 d_dr \u306b\u8fd4\u3059\u3002 d_dr \u306f\u30e1\u30e2\u30ea\u3001\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u7fa4\u306e\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3092 or \u3059\u308b\u306e\u3067\u3001\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf\u304c\u6709\u52b9\u3067\u306a\u3044\u3068\u304d\u306f 0x0 \u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002 d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_dr \u306e\u8aad\u307f\u8fbc\u307f\u30d0\u30a4\u30c8\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b\u3002 d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9 byte addressing d_dr/d_dw 32bit \u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u9806\u5e8f\u3092\u793a\u3059\u3002 d_be \u306b\u3088\u308b endian \u5207\u308a\u66ff\u3048\u3092\u56f3\u793a\u3059\u308b\u3002 Reset, Interrupt \u00b6 \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ea\u30bb\u30c3\u30c8\u6642\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf pc \u306f 0x0 \u306b\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u6642 0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u306f\u3001rv_core \u5185\u81d3\u306e 64bit \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u3068\u3001\u5916\u90e8\u7aef\u5b50 irq \u306b\u3088\u308b\u5272\u308a\u8fbc\u307f\u3092\u5b9f\u88c5\u3057\u305f\u3002 \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c\u306e\u521d\u671f\u5316\u30eb\u30fc\u30c1\u30f3\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306e\u8a2d\u5b9a\u3068\u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306e\u30d9\u30af\u30bf\u30fc(mtvec)\u8a2d\u5b9a\u3092\u884c\u3046 \u521d\u671f\u5316\u30eb\u30fc\u30c1\u30f3\u306e\u4f8b example: crt0.S # # crt0.S : RISC-V startup routine # .section .text.startup .global _start , __errno .type _start , @function _start: # Initialize global pointer .option push .option norelax 1: auipc gp , %pcrel_hi ( __global_pointer$ ) addi gp , gp , %pcrel_lo ( 1 b ) .option pop la sp , __stack_top # stack pointer \u8a2d\u5b9a la t0 , _irq_handle # \u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u30a2\u30c9\u30ec\u30b9 csrw mtvec , t0 # mtvec \u306b\u8a2d\u5b9a # Clear bss section la a0 , _edata la a1 , _end sub a1 , a1 , a0 call memclr # rv-test/lib/memclr.c # Call main() lw a0 , 0 ( sp ) # a0 = argc addi a1 , sp , __SIZEOF_POINTER__ # a1 = argv li a2 , 0 # a2 = envp = NULL call main call at_exit li t0 , 93 # SYS_exit scall Loop: j Loop _errno: nop # Interrupt handler .align 4 _irq_handle: # Save registers. addi sp , sp , -( 12 * 4 ) sw ra , ( 0 * 4 )( sp ) sw a0 , ( 1 * 4 )( sp ) sw a1 , ( 2 * 4 )( sp ) sw a2 , ( 3 * 4 )( sp ) sw a3 , ( 4 * 4 )( sp ) sw a4 , ( 5 * 4 )( sp ) sw a5 , ( 6 * 4 )( sp ) sw s0 , ( 7 * 4 )( sp ) sw s1 , ( 8 * 4 )( sp ) sw t0 , ( 9 * 4 )( sp ) sw t1 , ( 10 * 4 )( sp ) sw t2 , ( 11 * 4 )( sp ) # Invoke the handler. mv a0 , sp csrr a1 , mcause csrr a2 , mepc jal irq_handler # Restore registers. lw ra , ( 0 * 4 )( sp ) lw a0 , ( 1 * 4 )( sp ) lw a1 , ( 2 * 4 )( sp ) lw a2 , ( 3 * 4 )( sp ) lw a3 , ( 4 * 4 )( sp ) lw a4 , ( 5 * 4 )( sp ) lw a5 , ( 6 * 4 )( sp ) lw s0 , ( 7 * 4 )( sp ) lw s1 , ( 8 * 4 )( sp ) lw t0 , ( 9 * 4 )( sp ) lw t1 , ( 10 * 4 )( sp ) lw t2 , ( 11 * 4 )( sp ) addi sp , sp , ( 12 * 4 ) # Return mret \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf mtime \u306f\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c clock \u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u7d9a\u3051\u308b\u3002 mie \u30ec\u30b8\u30b9\u30bf MTIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 mtime > mtimecmp \u3068\u306a\u308a\u3001mie.MTIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MTIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u8981\u56e0\u306f mtimecmp \u306e\u5024\u3092\u66f4\u65b0\uff08\u6b21\u306e\u5272\u308a\u8fbc\u307f\u3092\u671f\u5f85\u3059\u308b\u30ab\u30a6\u30f3\u30bf\u5024\u306b\u66f4\u65b0\uff09\u3059\u308b\u304b\u3001\u307e\u305f\u306f mie.MTIE \u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u30af\u30ea\u30a2\u3059\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f mie \u30ec\u30b8\u30b9\u30bf MEIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5916\u90e8\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u7aef\u5b50 irq \u304c 1 \u3067\u3001mie.MEIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MEIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u8981\u56e0\u8abf\u67fb\u3001\u8981\u56e0\u30af\u30ea\u30a2\u306f\u3001\u5404\u5916\u90e8\u56de\u8def\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3002 \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u9020 \u00b6","title":"rv_core module"},{"location":"20-rv_core.html#rv_core-module","text":"rv_core \u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6709\u3059\u308b CPU \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\u3002 FPGA\u306b\u5b9f\u88c5\u3057\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u7528\u3044\u308b\u76ee\u7684\u3067\u3001\u6700\u5c0f\u9650\u306e\u4ed5\u69d8\u3092\u5b9f\u88c5\u3057\u305f\u3002 \u547d\u4ee4\u30d0\u30b9\u3001\u30c7\u30fc\u30bf\u30d0\u30b9 \u5404 address 32bit / data 32bit \u5916\u90e8\u5272\u308a\u8fbc\u307f 1\u7cfb\u7d71 \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u3001\u30bf\u30a4\u30de\u30fc\u30b3\u30f3\u30da\u30a2\u5272\u308a\u8fbc\u307f","title":"rv_core module"},{"location":"20-rv_core.html#_1","text":"typedef logic [ 3 : 0 ] u4_t ; typedef logic [ 31 : 0 ] u32_t ; module rv_core #( parameter debug = 0 ) ( input logic clk , // clock input logic xreset , // 0:\u30ea\u30bb\u30c3\u30c8 // ---- \u547d\u4ee4\u30d0\u30b9 ---- output u32_t i_adr , // address (byte address) input u32_t i_dr , // read data (\u547d\u4ee4) output logic i_re , // read enable input logic i_rdy , // data ready // ---- \u30c7\u30fc\u30bf\u30d0\u30b9 ---- output u32_t d_adr , // address (byte address) input u32_t d_dr , // read data output logic d_re , // read enable output u32_t d_dw , // write data output u4_t d_we , // write enable (byte enable) input logic d_rdy , // data ready input logic d_be , // big endian input logic irq // interrupt request );","title":"\u5165\u51fa\u529b"},{"location":"20-rv_core.html#memory-map","text":"rv_core \u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3067\u3042\u308b\u3002 \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c 0x0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b\u3002 0xFFFF0000 \u756a\u5730\u4ee5\u964d\u3092\u30e1\u30e2\u30ea\u30de\u30c3\u30d7 I/O \u9818\u57df\u3068\u3057\u305f\u3002 \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc(mtime)\u3001\u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf(mtimecmp) \u306f 0xFFFF8000, 0xFFFF8008 \u306b\u914d\u7f6e\u3057\u305f\u3002 Address Description 0x00000000 reset start address \u3000\u3000\uff1a \u547d\u4ee4/\u30c7\u30fc\u30bf\u9818\u57df \u547d\u4ee4\uff1a16bit align / \u30c7\u30fc\u30bf:32bit align 0xFFFF0000 ~ 0xFFFFFFF I/O \u9818\u57df 0xFFFF8000 mtime 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc 0xFFFF8008 mtimecmp 64bit \u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf","title":"Memory map"},{"location":"20-rv_core.html#csr-control-and-status-register","text":"ISA\u30de\u30cb\u30e5\u30a2\u30eb vol II \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b CSR \u306e\u3046\u3061\u3001\u4ee5\u4e0b\u306e CSR \u3092\u5b9f\u88c5\u3057\u305f\u3002 \u4e3b\u306b\u30bf\u30a4\u30de\u30fc\u3001\u53ca\u3073\u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u5236\u5fa1\u306b\u7528\u3044\u308b\u3002 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5272\u308a\u8fbc\u307f\u306f\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u3002 Number Privilege Name Description 0x305 MRW mtvec Machine trap-handler base address 0x304 MRW mie Machine interrupt-enable register b11:MEIE b7:MTIE 0x344 MRW mip Machine interrupt pending b11:MEIP b7:MTIP 0x341 MRW mepc Machine exception program counter 0x341 MRW mcause Machine trap cause 0xC01 URO time Timer for rdtime instruction 0xC81 URO timeh Upper 32bits of time (for rdtimeh insn) Symbol Description MRW Machine level read/write URO User level read-only MEIE External interrupt enable MEIP External interrupt pending MTIE timer interrupt enable MTIP timer interrupt pending","title":"CSR Control and Status Register"},{"location":"20-rv_core.html#_2","text":"\u547d\u4ee4\u30d0\u30b9\u306f compress \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u300116bit align \u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b \u547d\u4ee4\u30e1\u30e2\u30ea\u306f\u300116bit align \u3067 32bit \u8aad\u307f\u51fa\u3057\u304c\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9\u306f\u30c7\u30fc\u30bf\u30e1\u30e2\u30ea\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u63a5\u7d9a\u3059\u308b 32bit \u30d0\u30b9\u3067\u3042\u308b\u304c\u3001write enable d_we[3:0] \u306b\u3088\u308a\u3001byte/16bit/32bit \u30a2\u30af\u30bb\u30b9\u3092\u884c\u3046\u3002 read \u6642\u3082\u3001\u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306b\u5fdc\u3058\u3066 32bit \u30c7\u30fc\u30bf\u306e\u5fc5\u8981\u306a byte \u3092\u53d6\u308a\u8fbc\u3080\u3002 32bit \u30c7\u30fc\u30bf\u5185\u306e\u30d0\u30a4\u30c8\u30a2\u30af\u30bb\u30b9\u9806\u306f little endian \u3067\u3042\u308b\u304c\u3001d_be \u4fe1\u53f7\u3092 assert \u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001 big endian \u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 read / write \u5404 1 clock cycle \u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u304c\u3001rdy \u4fe1\u53f7\u3092\u4efb\u610f\u30b5\u30a4\u30af\u30eb de-assert \u3059\u308b\u3053\u3068\u3067 cycle \u3092\u5ef6\u9577\u3067\u304d\u308b","title":"\u547d\u4ee4/\u30c7\u30fc\u30bf\u30d0\u30b9\u63a5\u7d9a"},{"location":"20-rv_core.html#bus-timing","text":"\u547d\u4ee4\u30d0\u30b9 read timing i_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001i_adr \u306b\u5bfe\u5fdc\u3059\u308b\u547d\u4ee4\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 i_dr \u306b\u8fd4\u3059\u3002 i_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 i_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9 write timing d_we[3:0] \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u30d0\u30a4\u30c8\u306b d_dw \u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u3002 d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b\u3002 d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9 read timing d_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 d_dr \u306b\u8fd4\u3059\u3002 d_dr \u306f\u30e1\u30e2\u30ea\u3001\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u7fa4\u306e\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3092 or \u3059\u308b\u306e\u3067\u3001\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf\u304c\u6709\u52b9\u3067\u306a\u3044\u3068\u304d\u306f 0x0 \u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002 d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_dr \u306e\u8aad\u307f\u8fbc\u307f\u30d0\u30a4\u30c8\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b\u3002 d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002 \u30c7\u30fc\u30bf\u30d0\u30b9 byte addressing d_dr/d_dw 32bit \u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u9806\u5e8f\u3092\u793a\u3059\u3002 d_be \u306b\u3088\u308b endian \u5207\u308a\u66ff\u3048\u3092\u56f3\u793a\u3059\u308b\u3002","title":"bus timing"},{"location":"20-rv_core.html#reset-interrupt","text":"\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ea\u30bb\u30c3\u30c8\u6642\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf pc \u306f 0x0 \u306b\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u6642 0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u306f\u3001rv_core \u5185\u81d3\u306e 64bit \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u3068\u3001\u5916\u90e8\u7aef\u5b50 irq \u306b\u3088\u308b\u5272\u308a\u8fbc\u307f\u3092\u5b9f\u88c5\u3057\u305f\u3002 \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c\u306e\u521d\u671f\u5316\u30eb\u30fc\u30c1\u30f3\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306e\u8a2d\u5b9a\u3068\u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306e\u30d9\u30af\u30bf\u30fc(mtvec)\u8a2d\u5b9a\u3092\u884c\u3046 \u521d\u671f\u5316\u30eb\u30fc\u30c1\u30f3\u306e\u4f8b example: crt0.S # # crt0.S : RISC-V startup routine # .section .text.startup .global _start , __errno .type _start , @function _start: # Initialize global pointer .option push .option norelax 1: auipc gp , %pcrel_hi ( __global_pointer$ ) addi gp , gp , %pcrel_lo ( 1 b ) .option pop la sp , __stack_top # stack pointer \u8a2d\u5b9a la t0 , _irq_handle # \u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u30a2\u30c9\u30ec\u30b9 csrw mtvec , t0 # mtvec \u306b\u8a2d\u5b9a # Clear bss section la a0 , _edata la a1 , _end sub a1 , a1 , a0 call memclr # rv-test/lib/memclr.c # Call main() lw a0 , 0 ( sp ) # a0 = argc addi a1 , sp , __SIZEOF_POINTER__ # a1 = argv li a2 , 0 # a2 = envp = NULL call main call at_exit li t0 , 93 # SYS_exit scall Loop: j Loop _errno: nop # Interrupt handler .align 4 _irq_handle: # Save registers. addi sp , sp , -( 12 * 4 ) sw ra , ( 0 * 4 )( sp ) sw a0 , ( 1 * 4 )( sp ) sw a1 , ( 2 * 4 )( sp ) sw a2 , ( 3 * 4 )( sp ) sw a3 , ( 4 * 4 )( sp ) sw a4 , ( 5 * 4 )( sp ) sw a5 , ( 6 * 4 )( sp ) sw s0 , ( 7 * 4 )( sp ) sw s1 , ( 8 * 4 )( sp ) sw t0 , ( 9 * 4 )( sp ) sw t1 , ( 10 * 4 )( sp ) sw t2 , ( 11 * 4 )( sp ) # Invoke the handler. mv a0 , sp csrr a1 , mcause csrr a2 , mepc jal irq_handler # Restore registers. lw ra , ( 0 * 4 )( sp ) lw a0 , ( 1 * 4 )( sp ) lw a1 , ( 2 * 4 )( sp ) lw a2 , ( 3 * 4 )( sp ) lw a3 , ( 4 * 4 )( sp ) lw a4 , ( 5 * 4 )( sp ) lw a5 , ( 6 * 4 )( sp ) lw s0 , ( 7 * 4 )( sp ) lw s1 , ( 8 * 4 )( sp ) lw t0 , ( 9 * 4 )( sp ) lw t1 , ( 10 * 4 )( sp ) lw t2 , ( 11 * 4 )( sp ) addi sp , sp , ( 12 * 4 ) # Return mret \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf mtime \u306f\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c clock \u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u7d9a\u3051\u308b\u3002 mie \u30ec\u30b8\u30b9\u30bf MTIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 mtime > mtimecmp \u3068\u306a\u308a\u3001mie.MTIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MTIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u8981\u56e0\u306f mtimecmp \u306e\u5024\u3092\u66f4\u65b0\uff08\u6b21\u306e\u5272\u308a\u8fbc\u307f\u3092\u671f\u5f85\u3059\u308b\u30ab\u30a6\u30f3\u30bf\u5024\u306b\u66f4\u65b0\uff09\u3059\u308b\u304b\u3001\u307e\u305f\u306f mie.MTIE \u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u30af\u30ea\u30a2\u3059\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f mie \u30ec\u30b8\u30b9\u30bf MEIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5916\u90e8\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u7aef\u5b50 irq \u304c 1 \u3067\u3001mie.MEIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MEIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u8981\u56e0\u8abf\u67fb\u3001\u8981\u56e0\u30af\u30ea\u30a2\u306f\u3001\u5404\u5916\u90e8\u56de\u8def\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3002","title":"Reset, Interrupt"},{"location":"20-rv_core.html#_3","text":"","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u9020"},{"location":"25-xsim.html","text":"\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 \u00b6 rv_core \u306e\u52d5\u4f5c\u3092\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u78ba\u8a8d\u3059\u308b\u3002 rvsim \u306e\u52d5\u4f5c\u3068\u6bd4\u8f03\u3057\u3001RTL \u306e\u30c7\u30d0\u30c3\u30b0\u3092\u884c\u3046\u3002 \u251c\u2500\u2500 rv_core \u2502 \u251c\u2500\u2500 hdl/ # HDL source \u2502 \u2514\u2500\u2500 sim/ # \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u74b0\u5883 \u2502 \u251c\u2500\u2500 convmem.py # .mem \u30d5\u30a1\u30a4\u30eb\u3092 prog_u.mem/prog_l.mem \u306b\u5909\u63db\u3059\u308b \u2502 \u251c\u2500\u2500 compile.sh # HDL \u3092\u8aad\u307f\u8fbc\u3093\u3067 vivado \u306e xelab \u3067 elaboration \u2192 xsim.dir/tb_rvc \u2502 \u251c\u2500\u2500 run.sh # \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c (xsim command line) \u2502 \u251c\u2500\u2500 sim.sh # \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c (xsim GUI) \u2502 \u251c\u2500\u2500 regression.sh # \u3044\u304f\u3064\u304b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0(.mem)\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 .ref \u3068\u6bd4\u8f03 \u2502 \u251c\u2500\u2500 tb_rvc.prj # HDL source list \u2502 \u251c\u2500\u2500 rvc.sv # rv_core \u3068 dpram \u3092\u5b9f\u88c5\u3057\u305f module \u2502 \u3000 \u2514\u2500\u2500 tb_rvc.sv # rvc \u306e\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1 \u2502 \u2514\u2500\u2500 rv-test # \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 crt0.S # startup routine \u251c\u2500\u2500 *.c # program C source \u251c\u2500\u2500 rv32ldscr.x # linker script \u251c\u2500\u2500 include/ \u2514\u2500\u2500 lib/ # mini stdio (printf etc) \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u624b\u9806 \u00b6 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb \u00b6 $ cd rv32emc/rv-test $ make # \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb \u2192 \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea\u751f\u6210 : /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I./include -c pi.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o pi crt0.o pi.o -march = rv32emc -mabi = ilp32e -Wl,-Map,pi.map,-T,rv32ldscr.x -nostdlib -L./lib -lmc -lm -lc -lgcc : $ make install # \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea\u304b\u3089 RAM\u306e\u521d\u671f\u5024\u30d5\u30a1\u30a4\u30eb(.mem)\u3001ISS \u3067\u306e\u5b9f\u884c\u7d50\u679c(.ref) \u3092\u4f5c\u6210 : /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O binary -S -R .stack pi pi.bin # \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea pi \u3092RAM\u306e\u521d\u671f\u5024\u30d5\u30a1\u30a4\u30eb pi.mem \u306b\u5909\u63db od -An -tx4 -v pi.bin > pi.mem : rvsim -r pi 2 > pi.ref # ISS(rvsim) \u3067\u5b9f\u884c\u30d0\u30a4\u30ca\u30ea pi \u3092\u5b9f\u884c\u3057\u3001printf() \u51fa\u529b\u3092 pi.ref \u306b\u30bb\u30fc\u30d6 reset_pc () exit () : 19 Total clock cycles: 26717123 stall - bra: 1093043 [ 4 .1% ] data: 346613 [ 1 .3% ] exec: 10115680 [ 37 .9% ] : cp -p hello.mem fptest.mem gauss.mem pi.mem ecc.mem mul.mem hello.ref fptest.ref gauss.ref pi.ref ecc.ref mul.ref ../rv_core/sim/ # .mem .ref \u3092\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c dir ../rv_core/sim/ \u306b\u30b3\u30d4\u30fc \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 \u00b6 $ cd rv32emc/rv_core/sim $ ./convmem.py pi.mem # \u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e .mem \u30d5\u30a1\u30a4\u30eb\u3092 dpram \u306e\u521d\u671f\u5024\u30d5\u30a1\u30a4\u30eb prog_u.mem/prog_l.mem \u306b\u5909\u63db $ ./compile.sh # elaboration $ ./run.sh # xsim \u5b9f\u884c (command line) ( $ ./sim.sh ) # xsim \u5b9f\u884c (GUI) # printf() \u51fa\u529b\u306f\u3001\"stderr.out\" \u306b\u51fa\u529b\u3055\u308c\u308b","title":"\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3"},{"location":"25-xsim.html#_1","text":"rv_core \u306e\u52d5\u4f5c\u3092\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u78ba\u8a8d\u3059\u308b\u3002 rvsim \u306e\u52d5\u4f5c\u3068\u6bd4\u8f03\u3057\u3001RTL \u306e\u30c7\u30d0\u30c3\u30b0\u3092\u884c\u3046\u3002 \u251c\u2500\u2500 rv_core \u2502 \u251c\u2500\u2500 hdl/ # HDL source \u2502 \u2514\u2500\u2500 sim/ # \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u74b0\u5883 \u2502 \u251c\u2500\u2500 convmem.py # .mem \u30d5\u30a1\u30a4\u30eb\u3092 prog_u.mem/prog_l.mem \u306b\u5909\u63db\u3059\u308b \u2502 \u251c\u2500\u2500 compile.sh # HDL \u3092\u8aad\u307f\u8fbc\u3093\u3067 vivado \u306e xelab \u3067 elaboration \u2192 xsim.dir/tb_rvc \u2502 \u251c\u2500\u2500 run.sh # \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c (xsim command line) \u2502 \u251c\u2500\u2500 sim.sh # \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c (xsim GUI) \u2502 \u251c\u2500\u2500 regression.sh # \u3044\u304f\u3064\u304b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0(.mem)\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 .ref \u3068\u6bd4\u8f03 \u2502 \u251c\u2500\u2500 tb_rvc.prj # HDL source list \u2502 \u251c\u2500\u2500 rvc.sv # rv_core \u3068 dpram \u3092\u5b9f\u88c5\u3057\u305f module \u2502 \u3000 \u2514\u2500\u2500 tb_rvc.sv # rvc \u306e\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1 \u2502 \u2514\u2500\u2500 rv-test # \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 crt0.S # startup routine \u251c\u2500\u2500 *.c # program C source \u251c\u2500\u2500 rv32ldscr.x # linker script \u251c\u2500\u2500 include/ \u2514\u2500\u2500 lib/ # mini stdio (printf etc)","title":"\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3"},{"location":"25-xsim.html#_2","text":"","title":"\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u624b\u9806"},{"location":"25-xsim.html#_3","text":"$ cd rv32emc/rv-test $ make # \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb \u2192 \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea\u751f\u6210 : /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I./include -c pi.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o pi crt0.o pi.o -march = rv32emc -mabi = ilp32e -Wl,-Map,pi.map,-T,rv32ldscr.x -nostdlib -L./lib -lmc -lm -lc -lgcc : $ make install # \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea\u304b\u3089 RAM\u306e\u521d\u671f\u5024\u30d5\u30a1\u30a4\u30eb(.mem)\u3001ISS \u3067\u306e\u5b9f\u884c\u7d50\u679c(.ref) \u3092\u4f5c\u6210 : /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O binary -S -R .stack pi pi.bin # \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea pi \u3092RAM\u306e\u521d\u671f\u5024\u30d5\u30a1\u30a4\u30eb pi.mem \u306b\u5909\u63db od -An -tx4 -v pi.bin > pi.mem : rvsim -r pi 2 > pi.ref # ISS(rvsim) \u3067\u5b9f\u884c\u30d0\u30a4\u30ca\u30ea pi \u3092\u5b9f\u884c\u3057\u3001printf() \u51fa\u529b\u3092 pi.ref \u306b\u30bb\u30fc\u30d6 reset_pc () exit () : 19 Total clock cycles: 26717123 stall - bra: 1093043 [ 4 .1% ] data: 346613 [ 1 .3% ] exec: 10115680 [ 37 .9% ] : cp -p hello.mem fptest.mem gauss.mem pi.mem ecc.mem mul.mem hello.ref fptest.ref gauss.ref pi.ref ecc.ref mul.ref ../rv_core/sim/ # .mem .ref \u3092\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c dir ../rv_core/sim/ \u306b\u30b3\u30d4\u30fc","title":"\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb"},{"location":"25-xsim.html#_4","text":"$ cd rv32emc/rv_core/sim $ ./convmem.py pi.mem # \u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e .mem \u30d5\u30a1\u30a4\u30eb\u3092 dpram \u306e\u521d\u671f\u5024\u30d5\u30a1\u30a4\u30eb prog_u.mem/prog_l.mem \u306b\u5909\u63db $ ./compile.sh # elaboration $ ./run.sh # xsim \u5b9f\u884c (command line) ( $ ./sim.sh ) # xsim \u5b9f\u884c (GUI) # printf() \u51fa\u529b\u306f\u3001\"stderr.out\" \u306b\u51fa\u529b\u3055\u308c\u308b","title":"\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3"},{"location":"30-fpga.html","text":"FPGA \u5b9f\u88c5 \u00b6 rv_core \u306e\u52d5\u4f5c\u3092 Xilinx Artix7 FPGA \u3067\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b example design \u3092\u7528\u610f\u3057\u305f\u3002 Taget board : Arty-A7 source(github) rv32emc/rv_core/ example design \u00b6 rv_core \u3068\u30e1\u30e2\u30ea dpram\u3001\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u56de\u8def rv_sio \u3092\u63a5\u7d9a\u3057\u305f\u56de\u8def rvc.sv \u3092\u7528\u610f\u3057\u3001Arty-A7-35 \u30dc\u30fc\u30c9\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002 \u251c\u2500\u2500 rv_core \u2502 \u251c\u2500\u2500 hdl/ # rv_core HDL source \u2502 \u2514\u2500\u2500 syn \u2502 \u251c\u2500\u2500 build.sh # \u8ad6\u7406\u5408\u6210\u30b9\u30af\u30ea\u30d7\u30c8 \u2502 \u251c\u2500\u2500 build.tcl # vivado tcl scripts \u2502 \u251c\u2500\u2500 read_hdl.tcl # HDL source \u3092\u8aad\u307f\u8fbc\u3080 \u2502 \u251c\u2500\u2500 write_mmi.tcl \u2502 \u251c\u2500\u2500 arty-a7-pinassign.xdc # \u5236\u7d04\u30d5\u30a1\u30a4\u30eb\u3001timing / pin assign \u2502 \u251c\u2500\u2500 chgmem.sh # rev/rvc.bit \u30d5\u30a1\u30a4\u30eb\u306e RAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b \u2502 \u251c\u2500\u2500 config.sh # Arty-A7 FPGA\u306b rev/rvc.bit \u3092\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 \u2502 \u251c\u2500\u2500 program.sh # Arty-A7 \u306e spi flash \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u2502 \u251c\u2500\u2500 rvc.sv # top module \u2502 \u2514\u2500\u2500 clk_gen.xcix # clock \u751f\u6210 PLL \u251c\u2500\u2500 rv_io/ # rv_sio UART HDL source \u2514\u2500\u2500 rvmon # \u30c7\u30d0\u30c3\u30b0\u7528\u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 convmem.py # \u30e1\u30e2\u30ea\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u5909\u63db\u30b9\u30af\u30ea\u30d7\u30c8 \u251c\u2500\u2500 crt0.S # \u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30eb\u30fc\u30c1\u30f3\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9 \u251c\u2500\u2500 rvmon.c # \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 lnkscr.x # linker script \u251c\u2500\u2500 include/ \u251c\u2500\u2500 lib/ # mini stdio (printf etc.) \u251c\u2500\u2500 app/ # \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b \u2514\u2500\u2500 term # \u30b7\u30ea\u30a2\u30eb\u30bf\u30fc\u30df\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 term.c rvc.sv module rvc #( parameter debug = 0 ) ( input logic clk , // Arty-A7 \u306e\u30b7\u30b9\u30c6\u30e0\u30af\u30ed\u30c3\u30af(100MHz)\u3092\u5165\u529b\u3001rvc\u5185\u90e8\u306ePLL\u3067CPU\u30af\u30ed\u30c3\u30af\u3092\u751f\u6210 input u8_t pin , // 8bit pararell \u5165\u529b SW \u306b\u63a5\u7d9a output u8_t pout , // 8bit pararell \u51fa\u529b LED \u306b\u63a5\u7d9a input logic rxd , // \u30b7\u30ea\u30a2\u30eb\u30bf\u30fc\u30df\u30ca\u30eb output logic txd ); \u5165\u51fa\u529b\u30dd\u30fc\u30c8\u306e\u63a5\u7d9a\u5148\u306f\u3001 arty-a7-pinassign.xdc \u3092\u53c2\u7167\u3002 \u51e6\u7406\u306e\u6d41\u308c \u00b6 rv_core \u3067\u5b9f\u884c\u3059\u308b program \u3092\u7528\u610f \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 rvmon \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u74b0\u5883\u3092\u7528\u610f\u3057\u3001rvmon \u3092\u30b3\u30f3\u30d1\u30a4\u30eb \u2192 \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea(rvmon)\u3092\u4f5c\u6210\u3057\u3001\u30e1\u30e2\u30ea\u306e\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u306b\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f (prog_u.mem, prog_l.mem) \u306b\u5909\u63db\u3059\u308b\u3002 $ cd rv32emc/rvmon $ make # rvmon \u3092\u4f5c\u6210 $ make install # ../rv_core/syn/ \u306b\u30e1\u30e2\u30ea\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb # /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O binary -S -R .stack rvmon rvmon.bin # od -An -tx4 -v rvmon.bin > rvmon.mem # ./convmem.py rvmon.mem # cp -p prog_u.mem prog_l.mem ../rv_core/syn/ # cp -p rvmon ../rv_core/syn/rvmon.elf rvmon.mem \u306f \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u3001\u8ad6\u7406\u5408\u6210\u6642\u306b verilog \u306e $readmemh() \u3067\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f\u3002 dpram \u3067\u306f 32bit \u30ef\u30fc\u30c9\u306e \u4e0a\u4f4d\u3001\u4e0b\u4f4d 16bit \u306b\u5206\u3051\u305f\u521d\u671f\u5316\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5909\u63db\u3059\u308b\u3002 dpram.sv dpram #(. ADDR_WIDTH ( 13 ), . init_file_u ( \"prog_u.mem\" ), // upper 16bit (31:16) initial data . init_file_l ( \"prog_l.mem\" ) // lower 16bit (15:0) initial data ) u_dpram ( \u8ad6\u7406\u5408\u6210\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 Vivado (2020.2) \u3067\u8ad6\u7406\u5408\u6210\u3002 build.sh \u3067\u5408\u6210\u6642\u3001prog_u.mem prog_l.mem \u30d5\u30a1\u30a4\u30eb\u3067 RAM \u3092\u521d\u671f\u5316\u3002 $ cd ../rv_core/syn $ ./build.sh # vivado \u3067 hdl \u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8ad6\u7406\u5408\u6210 # FPGA\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 rev/rvc.bit \u3092\u751f\u6210 # rev/ \u306e\u4e0b\u306b\u5404\u7a2e\u30ec\u30dd\u30fc\u30c8\u3092\u751f\u6210 $ ./config.sh # bit file \u3092 FPGA \u306b\u30ed\u30fc\u30c9 $ ./program.sh # bit file \u3092 Arty-A7 \u306e ROM \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u5408\u6210\u6e08\u307f bit file \u4e2d\u306e RAM \u306e\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b \u5408\u6210\u6642\u3001write_mmi.tcl \u3067 block RAM \u306e\u914d\u7f6e\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u30d5\u30a1\u30a4\u30eb prog.mmi \u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3002 Vivado \u306e updatemem \u30c4\u30fc\u30eb\u3067 bit file \u3092\u8aad\u307f\u8fbc\u307f\u3001 prog.mmi \u306b\u3057\u305f\u304c\u3063\u3066 BRAM \u306e\u521d\u671f\u5024\u3092\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u751f\u6210\u3057\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb(elf \u5f62\u5f0f)\u306e\u5185\u5bb9\u306b\u66f8\u304d\u63db\u3048\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 # chgmem.sh $ updatemem -meminfo prog.mmi -data $elf -bit rev/rvc.bit -proc u_dpram -force -out rvcchg.bit \u518d\u5408\u6210\u3059\u308b\u3053\u3068\u306a\u304f BRAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 write_mmi.tcl \u306f dpram \u306e\u69cb\u6210\u306b\u5bfe\u5fdc\u3057\u3066\u8a18\u8ff0\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c \u00b6 Arty-A7 \u306b\u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0(rvmon) \u3092\u30ed\u30fc\u30c9\u3057\u3001USB-UART \u7d4c\u7531\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u63a5\u7d9a\u3059\u308b\u3002 rvmon \u7528\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0(term)\u3092\u7528\u610f\u3057\u305f\u3002 Host \u304b\u3089 S-format \u5f62\u5f0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u5bb9\u6613\u306b\u306a\u308b\u3002 rvmon \u3067 'l cmd ' \u30b3\u30de\u30f3\u30c9\u3068\u6253\u3064\u3068\u3001term \u306b\u5bfe\u3057\u3066 '\\033< cmd \\n' \u3092\u9001\u51fa\u3059\u308b\u3002term \u306f '\\033<' \u3092\u691c\u51fa\u3059\u308b\u3068\u3001' cmd .mot' \u30d5\u30a1\u30a4\u30eb\u3092 open \u3057\u3001 cmd .mot \u306e\u5185\u5bb9\u3092 rvmon \u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002 cmd .mot \u306e\u7d42\u4e86\u6642\u3001EOT ('\\004') \u3092\u9001\u51fa\u3057\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7d42\u4e86\u3059\u308b\u3002 $ cd ../../rvmon/term $ make $ ./term 0 : usb-Xilinx_JTAG+Serial_1234-oj1-if01-port0 1 : usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 select port ( 0 ~1 ) : 1 *** open '/dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0' rvmon$ help d { addr } : dump memory l { cmd ( .mot )} : load S-record file # cmd.mot \u30d5\u30a1\u30a4\u30eb\u3092\u30e1\u30e2\u30ea\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30020x4000 \u304b\u3089\u5b9f\u884c\u3059\u308b\u3002 go : exec cmd ( @0x4000 ) rvmon$ # Ctrl-Alt-'C' \u3067 term \u7d42\u4e86 lrwxrwxrwx 1 root root 13 Apr 23 08:45 /dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 -> ../../ttyUSB2 crw-rw---- 1 root dialout 188, 2 Apr 23 22:45 /dev/ttyUSB2 ** 'dialout' group \u3092\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u306b\u52a0\u3048\u3066\u304a\u304f\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u6a29\u9650\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 rv32emc/rvmon/app \u306b\u3044\u304f\u3064\u304b\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u610f\u3057\u305f\u3002 rvmon \u3067\u30ed\u30fc\u30c9\u3057\u3001FPGA \u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3002 name descrip pi \u591a\u500d\u9577\u6f14\u7b97\u3067\u591a\u6570\u6841\u306e \\(\\pi\\) \u3092\u6c42\u3081\u308b ecc Reed Solomon \u30a8\u30e9\u30fc\u8a02\u6b63 gauss \u6b63\u898f\u5206\u5e03\u30e9\u30f3\u30c0\u30e0\u767a\u751f(soft float \u306e\u30c6\u30b9\u30c8) $ cd ../../rvmon $ make apps make -C app install make [ 1 ] : \u30c7\u30a3\u30ec\u30af\u30c8\u30ea 'xxx/rv32emc/rvmon/app' \u306b\u5165\u308a\u307e\u3059 /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c gauss.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c crt0.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o gauss.elf crt0.o gauss.o -march = rv32emc -mabi = ilp32e -Wl,-Map,gauss.map,-T,lnkscr.x -nostdlib -L../lib -Xlinker -R../rvmon -lmc -lm -lc -lgcc /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O srec --srec-forceS3 -S -R .stack gauss.elf gauss.mot /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c pi.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o pi.elf crt0.o pi.o -march = rv32emc -mabi = ilp32e -Wl,-Map,pi.map,-T,lnkscr.x -nostdlib -L../lib -Xlinker -R../rvmon -lmc -lm -lc -lgcc /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O srec --srec-forceS3 -S -R .stack pi.elf pi.mot /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c ecc.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o ecc.elf crt0.o ecc.o -march = rv32emc -mabi = ilp32e -Wl,-Map,ecc.map,-T,lnkscr.x -nostdlib -L../lib -Xlinker -R../rvmon -lmc -lm -lc -lgcc /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O srec --srec-forceS3 -S -R .stack ecc.elf ecc.mot cp -p gauss.mot pi.mot ecc.mot ../term/ # term \u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b rm crt0.o make [ 1 ] : \u30c7\u30a3\u30ec\u30af\u30c8\u30ea 'xxx/rv32emc/rvmon/app' \u304b\u3089\u51fa\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306f 0x4000 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u30ea\u30f3\u30af\u3055\u308c\u308b\u3002 \u307e\u305f\u3001\u30ea\u30f3\u30af\u30aa\u30d7\u30b7\u30e7\u30f3 -Xlinker -R../rvmon \u306b\u3088\u308a\u3001\u30e2\u30cb\u30bf\u30d7\u30ed\u30b0\u30e9\u30e0 rvmon \u306b\u542b\u307e\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b(memory \u7bc0\u7d04)\u3002 rvmon$ l pi # pi.mot(\u5186\u5468\u7387\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0) \u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u30010x4000 \u756a\u5730\u304b\u3089\u5b9f\u884c ................................................................................................ .................................................................................. [13062 bytes tfr cs:691498] rvmon$ go # \u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 call 0x4000 run user func : 4000 iter:679 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211 : 2620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659 2509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459 53959431049972524680845987273644695848653836736222626099124608057 cs : 2069485033 OK elapsed : 2288.07ms 0 rvmon$","title":"FPGA \u5b9f\u88c5"},{"location":"30-fpga.html#fpga","text":"rv_core \u306e\u52d5\u4f5c\u3092 Xilinx Artix7 FPGA \u3067\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b example design \u3092\u7528\u610f\u3057\u305f\u3002 Taget board : Arty-A7 source(github) rv32emc/rv_core/","title":"FPGA \u5b9f\u88c5"},{"location":"30-fpga.html#example-design","text":"rv_core \u3068\u30e1\u30e2\u30ea dpram\u3001\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u56de\u8def rv_sio \u3092\u63a5\u7d9a\u3057\u305f\u56de\u8def rvc.sv \u3092\u7528\u610f\u3057\u3001Arty-A7-35 \u30dc\u30fc\u30c9\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002 \u251c\u2500\u2500 rv_core \u2502 \u251c\u2500\u2500 hdl/ # rv_core HDL source \u2502 \u2514\u2500\u2500 syn \u2502 \u251c\u2500\u2500 build.sh # \u8ad6\u7406\u5408\u6210\u30b9\u30af\u30ea\u30d7\u30c8 \u2502 \u251c\u2500\u2500 build.tcl # vivado tcl scripts \u2502 \u251c\u2500\u2500 read_hdl.tcl # HDL source \u3092\u8aad\u307f\u8fbc\u3080 \u2502 \u251c\u2500\u2500 write_mmi.tcl \u2502 \u251c\u2500\u2500 arty-a7-pinassign.xdc # \u5236\u7d04\u30d5\u30a1\u30a4\u30eb\u3001timing / pin assign \u2502 \u251c\u2500\u2500 chgmem.sh # rev/rvc.bit \u30d5\u30a1\u30a4\u30eb\u306e RAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b \u2502 \u251c\u2500\u2500 config.sh # Arty-A7 FPGA\u306b rev/rvc.bit \u3092\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 \u2502 \u251c\u2500\u2500 program.sh # Arty-A7 \u306e spi flash \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u2502 \u251c\u2500\u2500 rvc.sv # top module \u2502 \u2514\u2500\u2500 clk_gen.xcix # clock \u751f\u6210 PLL \u251c\u2500\u2500 rv_io/ # rv_sio UART HDL source \u2514\u2500\u2500 rvmon # \u30c7\u30d0\u30c3\u30b0\u7528\u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 convmem.py # \u30e1\u30e2\u30ea\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u5909\u63db\u30b9\u30af\u30ea\u30d7\u30c8 \u251c\u2500\u2500 crt0.S # \u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30eb\u30fc\u30c1\u30f3\u3001\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9 \u251c\u2500\u2500 rvmon.c # \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 lnkscr.x # linker script \u251c\u2500\u2500 include/ \u251c\u2500\u2500 lib/ # mini stdio (printf etc.) \u251c\u2500\u2500 app/ # \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b \u2514\u2500\u2500 term # \u30b7\u30ea\u30a2\u30eb\u30bf\u30fc\u30df\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 term.c rvc.sv module rvc #( parameter debug = 0 ) ( input logic clk , // Arty-A7 \u306e\u30b7\u30b9\u30c6\u30e0\u30af\u30ed\u30c3\u30af(100MHz)\u3092\u5165\u529b\u3001rvc\u5185\u90e8\u306ePLL\u3067CPU\u30af\u30ed\u30c3\u30af\u3092\u751f\u6210 input u8_t pin , // 8bit pararell \u5165\u529b SW \u306b\u63a5\u7d9a output u8_t pout , // 8bit pararell \u51fa\u529b LED \u306b\u63a5\u7d9a input logic rxd , // \u30b7\u30ea\u30a2\u30eb\u30bf\u30fc\u30df\u30ca\u30eb output logic txd ); \u5165\u51fa\u529b\u30dd\u30fc\u30c8\u306e\u63a5\u7d9a\u5148\u306f\u3001 arty-a7-pinassign.xdc \u3092\u53c2\u7167\u3002","title":"example design"},{"location":"30-fpga.html#_1","text":"rv_core \u3067\u5b9f\u884c\u3059\u308b program \u3092\u7528\u610f \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 rvmon \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u74b0\u5883\u3092\u7528\u610f\u3057\u3001rvmon \u3092\u30b3\u30f3\u30d1\u30a4\u30eb \u2192 \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea(rvmon)\u3092\u4f5c\u6210\u3057\u3001\u30e1\u30e2\u30ea\u306e\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u306b\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f (prog_u.mem, prog_l.mem) \u306b\u5909\u63db\u3059\u308b\u3002 $ cd rv32emc/rvmon $ make # rvmon \u3092\u4f5c\u6210 $ make install # ../rv_core/syn/ \u306b\u30e1\u30e2\u30ea\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb # /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O binary -S -R .stack rvmon rvmon.bin # od -An -tx4 -v rvmon.bin > rvmon.mem # ./convmem.py rvmon.mem # cp -p prog_u.mem prog_l.mem ../rv_core/syn/ # cp -p rvmon ../rv_core/syn/rvmon.elf rvmon.mem \u306f \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u3001\u8ad6\u7406\u5408\u6210\u6642\u306b verilog \u306e $readmemh() \u3067\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f\u3002 dpram \u3067\u306f 32bit \u30ef\u30fc\u30c9\u306e \u4e0a\u4f4d\u3001\u4e0b\u4f4d 16bit \u306b\u5206\u3051\u305f\u521d\u671f\u5316\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5909\u63db\u3059\u308b\u3002 dpram.sv dpram #(. ADDR_WIDTH ( 13 ), . init_file_u ( \"prog_u.mem\" ), // upper 16bit (31:16) initial data . init_file_l ( \"prog_l.mem\" ) // lower 16bit (15:0) initial data ) u_dpram ( \u8ad6\u7406\u5408\u6210\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 Vivado (2020.2) \u3067\u8ad6\u7406\u5408\u6210\u3002 build.sh \u3067\u5408\u6210\u6642\u3001prog_u.mem prog_l.mem \u30d5\u30a1\u30a4\u30eb\u3067 RAM \u3092\u521d\u671f\u5316\u3002 $ cd ../rv_core/syn $ ./build.sh # vivado \u3067 hdl \u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8ad6\u7406\u5408\u6210 # FPGA\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 rev/rvc.bit \u3092\u751f\u6210 # rev/ \u306e\u4e0b\u306b\u5404\u7a2e\u30ec\u30dd\u30fc\u30c8\u3092\u751f\u6210 $ ./config.sh # bit file \u3092 FPGA \u306b\u30ed\u30fc\u30c9 $ ./program.sh # bit file \u3092 Arty-A7 \u306e ROM \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u5408\u6210\u6e08\u307f bit file \u4e2d\u306e RAM \u306e\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b \u5408\u6210\u6642\u3001write_mmi.tcl \u3067 block RAM \u306e\u914d\u7f6e\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u30d5\u30a1\u30a4\u30eb prog.mmi \u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3002 Vivado \u306e updatemem \u30c4\u30fc\u30eb\u3067 bit file \u3092\u8aad\u307f\u8fbc\u307f\u3001 prog.mmi \u306b\u3057\u305f\u304c\u3063\u3066 BRAM \u306e\u521d\u671f\u5024\u3092\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u751f\u6210\u3057\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb(elf \u5f62\u5f0f)\u306e\u5185\u5bb9\u306b\u66f8\u304d\u63db\u3048\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 # chgmem.sh $ updatemem -meminfo prog.mmi -data $elf -bit rev/rvc.bit -proc u_dpram -force -out rvcchg.bit \u518d\u5408\u6210\u3059\u308b\u3053\u3068\u306a\u304f BRAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 write_mmi.tcl \u306f dpram \u306e\u69cb\u6210\u306b\u5bfe\u5fdc\u3057\u3066\u8a18\u8ff0\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","title":"\u51e6\u7406\u306e\u6d41\u308c"},{"location":"30-fpga.html#_2","text":"Arty-A7 \u306b\u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0(rvmon) \u3092\u30ed\u30fc\u30c9\u3057\u3001USB-UART \u7d4c\u7531\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u63a5\u7d9a\u3059\u308b\u3002 rvmon \u7528\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0(term)\u3092\u7528\u610f\u3057\u305f\u3002 Host \u304b\u3089 S-format \u5f62\u5f0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u5bb9\u6613\u306b\u306a\u308b\u3002 rvmon \u3067 'l cmd ' \u30b3\u30de\u30f3\u30c9\u3068\u6253\u3064\u3068\u3001term \u306b\u5bfe\u3057\u3066 '\\033< cmd \\n' \u3092\u9001\u51fa\u3059\u308b\u3002term \u306f '\\033<' \u3092\u691c\u51fa\u3059\u308b\u3068\u3001' cmd .mot' \u30d5\u30a1\u30a4\u30eb\u3092 open \u3057\u3001 cmd .mot \u306e\u5185\u5bb9\u3092 rvmon \u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002 cmd .mot \u306e\u7d42\u4e86\u6642\u3001EOT ('\\004') \u3092\u9001\u51fa\u3057\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7d42\u4e86\u3059\u308b\u3002 $ cd ../../rvmon/term $ make $ ./term 0 : usb-Xilinx_JTAG+Serial_1234-oj1-if01-port0 1 : usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 select port ( 0 ~1 ) : 1 *** open '/dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0' rvmon$ help d { addr } : dump memory l { cmd ( .mot )} : load S-record file # cmd.mot \u30d5\u30a1\u30a4\u30eb\u3092\u30e1\u30e2\u30ea\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30020x4000 \u304b\u3089\u5b9f\u884c\u3059\u308b\u3002 go : exec cmd ( @0x4000 ) rvmon$ # Ctrl-Alt-'C' \u3067 term \u7d42\u4e86 lrwxrwxrwx 1 root root 13 Apr 23 08:45 /dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 -> ../../ttyUSB2 crw-rw---- 1 root dialout 188, 2 Apr 23 22:45 /dev/ttyUSB2 ** 'dialout' group \u3092\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u306b\u52a0\u3048\u3066\u304a\u304f\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u6a29\u9650\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c"},{"location":"30-fpga.html#_3","text":"rv32emc/rvmon/app \u306b\u3044\u304f\u3064\u304b\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u610f\u3057\u305f\u3002 rvmon \u3067\u30ed\u30fc\u30c9\u3057\u3001FPGA \u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3002 name descrip pi \u591a\u500d\u9577\u6f14\u7b97\u3067\u591a\u6570\u6841\u306e \\(\\pi\\) \u3092\u6c42\u3081\u308b ecc Reed Solomon \u30a8\u30e9\u30fc\u8a02\u6b63 gauss \u6b63\u898f\u5206\u5e03\u30e9\u30f3\u30c0\u30e0\u767a\u751f(soft float \u306e\u30c6\u30b9\u30c8) $ cd ../../rvmon $ make apps make -C app install make [ 1 ] : \u30c7\u30a3\u30ec\u30af\u30c8\u30ea 'xxx/rv32emc/rvmon/app' \u306b\u5165\u308a\u307e\u3059 /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c gauss.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c crt0.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o gauss.elf crt0.o gauss.o -march = rv32emc -mabi = ilp32e -Wl,-Map,gauss.map,-T,lnkscr.x -nostdlib -L../lib -Xlinker -R../rvmon -lmc -lm -lc -lgcc /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O srec --srec-forceS3 -S -R .stack gauss.elf gauss.mot /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c pi.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o pi.elf crt0.o pi.o -march = rv32emc -mabi = ilp32e -Wl,-Map,pi.map,-T,lnkscr.x -nostdlib -L../lib -Xlinker -R../rvmon -lmc -lm -lc -lgcc /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O srec --srec-forceS3 -S -R .stack pi.elf pi.mot /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -nostartfiles -I../include -c ecc.c /opt/rv32e/bin/riscv32-unknown-elf-gcc -o ecc.elf crt0.o ecc.o -march = rv32emc -mabi = ilp32e -Wl,-Map,ecc.map,-T,lnkscr.x -nostdlib -L../lib -Xlinker -R../rvmon -lmc -lm -lc -lgcc /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O srec --srec-forceS3 -S -R .stack ecc.elf ecc.mot cp -p gauss.mot pi.mot ecc.mot ../term/ # term \u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b rm crt0.o make [ 1 ] : \u30c7\u30a3\u30ec\u30af\u30c8\u30ea 'xxx/rv32emc/rvmon/app' \u304b\u3089\u51fa\u307e\u3059 \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306f 0x4000 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u30ea\u30f3\u30af\u3055\u308c\u308b\u3002 \u307e\u305f\u3001\u30ea\u30f3\u30af\u30aa\u30d7\u30b7\u30e7\u30f3 -Xlinker -R../rvmon \u306b\u3088\u308a\u3001\u30e2\u30cb\u30bf\u30d7\u30ed\u30b0\u30e9\u30e0 rvmon \u306b\u542b\u307e\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b(memory \u7bc0\u7d04)\u3002 rvmon$ l pi # pi.mot(\u5186\u5468\u7387\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0) \u3092\u30e1\u30e2\u30ea\u306b\u30ed\u30fc\u30c9\u30010x4000 \u756a\u5730\u304b\u3089\u5b9f\u884c ................................................................................................ .................................................................................. [13062 bytes tfr cs:691498] rvmon$ go # \u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 call 0x4000 run user func : 4000 iter:679 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211 : 2620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659 2509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459 53959431049972524680845987273644695848653836736222626099124608057 cs : 2069485033 OK elapsed : 2288.07ms 0 rvmon$","title":"\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"x_env.html","text":"\u958b\u767a\u74b0\u5883 \u00b6 Host \u00b6 Ubuntu 20.04 \u4e0a\u3067\u958b\u767a\u3092\u884c\u3063\u305f FPGA \u958b\u767a\u30c4\u30fc\u30eb \u00b6 Vivado/2020.2 /opt/Xilinx/Vivado \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Vivado_Lab/2020.2 /opt/Xilinx/Vivado_Lab \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bf\u30fc\u30b2\u30c3\u30c8\u30dc\u30fc\u30c9\u3092 USB \u3067\u63a5\u7d9a\u3059\u308b\u30de\u30b7\u30f3\u304c Disk \u5bb9\u91cf\u4e0d\u8db3\u3067 Vivado \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u306e\u3067\u3001Vivado_Lab \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066 Host \u304b\u3089 remote \u3067\u5236\u5fa1\u3057\u305f \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9 riscv32 gcc (for rv32emc) \u00b6 RISC-V \u306e RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d3\u30eb\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb $ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk \\ build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev # gcc \u306e build \u3067\u5fc5\u8981\u3068\u306a\u308b\u30c4\u30fc\u30eb Prerequisites $ sudo mkdir /opt/rv32e # cross tool \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148 $ git clone --branch rvv-0.9.x --recursive https://github.com/riscv/riscv-gnu-toolchain $ cd riscv-gnu-toolchain $ patch -p1 < riscv-gdb-sim.patch # run \u306e\u4fee\u6b63 patch $ ./configure --prefix = /opt/rv32e --disable-linux --with-arch = rv32emac --with-abi = ilp32e $ make newlib # \u30c4\u30fc\u30eb\u7fa4\u3092 /opt/rv32e/ \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3001\u66f8\u304d\u8fbc\u307f\u6a29\u9650\u304c\u5fc5\u8981 Download: riscv-gdb-sim.patch gdb \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u306e\u4fee\u6b63 patch cross gdb \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3002 run \u306e syscall \u306f RV32E \u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001write(), exit() \u306a\u3069\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002 newlib \u3067\u306f syscall \u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001RV32E \u306e\u307f syscall_id \u3092\u6e21\u3059\u30ec\u30b8\u30b9\u30bf\u304c\u7570\u306a\u308b\u3002 riscv-newlib/libgloss/riscv/internal_syscall.h \u30fbRV32E \u306e syscall_id = \"t0\" \u30fb\u305d\u306e\u4ed6\u306e syscall_id = \"a7\" \u3053\u306e\u305f\u3081\u3001run \u3092 RV32E \u306e syscall \u306b\u5bfe\u5fdc\u3055\u305b\u308b patch \u3092\u7528\u610f\u3057\u305f\u3002 run \u5b9f\u884c\u6642\u3001 --model RV32E option \u3092\u3064\u3051\u308b\u3053\u3068\u3067 RV32E \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u3067\u304d\u308b\u3002 cross gdb \u3067 simulation \u5b9f\u884c\u3059\u308b\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3002 (gdb) target sim --model RV32E (gdb) load \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u30c4\u30fc\u30eb\u3001\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/bin/riscv32-unknown-elf-* # \u30b3\u30f3\u30d1\u30a4\u30e9\u3001\u30ea\u30f3\u30ab\u3001gdb etc /opt/rv32e/riscv32-unknown-elf/include/*.h # newlib \u6a19\u6e96\u30d8\u30c3\u30c0 /opt/rv32e/riscv32-unknown-elf/lib/libc.a libm.a ... # newlib \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/riscv32-unknown-elf/lib/ldscripts/elf32lriscv.x* # \u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 /opt/rv32e/lib/gcc/riscv32-unknown-elf/9.2.0/libgcc.a # gcc \u4e0b\u4f4d\u95a2\u6570(soft-float etc) \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u3067 RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb flag -march=rv32emc -mabi=ilp32e \u3092\u4e0e\u3048\u308b $ /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -c c_source.c Note rv_core \u306f gcc ver 9.2.0 \u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3063\u305f gcc ver 11.1.0 \u3067\u306f\u52d5\u4f5c\u4e0d\u5177\u5408\u304c\u767a\u751f\u3057\u305f\u304c\u3001\u539f\u56e0\u4e0d\u660e rvsim (ISS) \u00b6 $ sudo apt install binutils-dev libreadline8 libtinfo6 libncurses-dev libreadline-dev $ git clone https://github.com/shin-yamashita/rv32emc $ cd rv32emc/rvsim $ make $ sudo make install # -> /usr/local/bin/rvsim Target board \u00b6 Ultra96-v2 \u00b6 \u30dc\u30fc\u30c9\u60c5\u5831: AVNET Ultra96 Vivado board files: Avnet Board Definition Files (BDF) PYNQ V2.7 Pre-built SD image v2.7 for Ultra96 version 2 Download : Ultra96v1-2.7.0.zip Use Etcher to image it onto 32GB Micro SD Card PYNQ Linux, based on Ubuntu 20.04 pynq ttyPS0 pynq login: xilinx (automatic login) Welcome to PYNQ Linux, based on Ubuntu 20.04 (GNU/Linux 5.4.0-xilinx-v2020.2 aarch64) Arty-A7-35T \u00b6 \u30dc\u30fc\u30c9\u60c5\u5831: Digilent Arty-A7 Reference Vivado board files: Vivado Board Files for Digilent FPGA Boards","title":"\u958b\u767a\u74b0\u5883"},{"location":"x_env.html#_1","text":"","title":"\u958b\u767a\u74b0\u5883"},{"location":"x_env.html#host","text":"Ubuntu 20.04 \u4e0a\u3067\u958b\u767a\u3092\u884c\u3063\u305f","title":"Host"},{"location":"x_env.html#fpga","text":"Vivado/2020.2 /opt/Xilinx/Vivado \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Vivado_Lab/2020.2 /opt/Xilinx/Vivado_Lab \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bf\u30fc\u30b2\u30c3\u30c8\u30dc\u30fc\u30c9\u3092 USB \u3067\u63a5\u7d9a\u3059\u308b\u30de\u30b7\u30f3\u304c Disk \u5bb9\u91cf\u4e0d\u8db3\u3067 Vivado \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u306e\u3067\u3001Vivado_Lab \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066 Host \u304b\u3089 remote \u3067\u5236\u5fa1\u3057\u305f","title":"FPGA \u958b\u767a\u30c4\u30fc\u30eb"},{"location":"x_env.html#riscv32-gcc-for-rv32emc","text":"RISC-V \u306e RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d3\u30eb\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb $ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk \\ build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev # gcc \u306e build \u3067\u5fc5\u8981\u3068\u306a\u308b\u30c4\u30fc\u30eb Prerequisites $ sudo mkdir /opt/rv32e # cross tool \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148 $ git clone --branch rvv-0.9.x --recursive https://github.com/riscv/riscv-gnu-toolchain $ cd riscv-gnu-toolchain $ patch -p1 < riscv-gdb-sim.patch # run \u306e\u4fee\u6b63 patch $ ./configure --prefix = /opt/rv32e --disable-linux --with-arch = rv32emac --with-abi = ilp32e $ make newlib # \u30c4\u30fc\u30eb\u7fa4\u3092 /opt/rv32e/ \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3001\u66f8\u304d\u8fbc\u307f\u6a29\u9650\u304c\u5fc5\u8981 Download: riscv-gdb-sim.patch gdb \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u306e\u4fee\u6b63 patch cross gdb \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3002 run \u306e syscall \u306f RV32E \u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001write(), exit() \u306a\u3069\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002 newlib \u3067\u306f syscall \u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001RV32E \u306e\u307f syscall_id \u3092\u6e21\u3059\u30ec\u30b8\u30b9\u30bf\u304c\u7570\u306a\u308b\u3002 riscv-newlib/libgloss/riscv/internal_syscall.h \u30fbRV32E \u306e syscall_id = \"t0\" \u30fb\u305d\u306e\u4ed6\u306e syscall_id = \"a7\" \u3053\u306e\u305f\u3081\u3001run \u3092 RV32E \u306e syscall \u306b\u5bfe\u5fdc\u3055\u305b\u308b patch \u3092\u7528\u610f\u3057\u305f\u3002 run \u5b9f\u884c\u6642\u3001 --model RV32E option \u3092\u3064\u3051\u308b\u3053\u3068\u3067 RV32E \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u3067\u304d\u308b\u3002 cross gdb \u3067 simulation \u5b9f\u884c\u3059\u308b\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3002 (gdb) target sim --model RV32E (gdb) load \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u30c4\u30fc\u30eb\u3001\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/bin/riscv32-unknown-elf-* # \u30b3\u30f3\u30d1\u30a4\u30e9\u3001\u30ea\u30f3\u30ab\u3001gdb etc /opt/rv32e/riscv32-unknown-elf/include/*.h # newlib \u6a19\u6e96\u30d8\u30c3\u30c0 /opt/rv32e/riscv32-unknown-elf/lib/libc.a libm.a ... # newlib \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/riscv32-unknown-elf/lib/ldscripts/elf32lriscv.x* # \u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 /opt/rv32e/lib/gcc/riscv32-unknown-elf/9.2.0/libgcc.a # gcc \u4e0b\u4f4d\u95a2\u6570(soft-float etc) \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u3067 RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb flag -march=rv32emc -mabi=ilp32e \u3092\u4e0e\u3048\u308b $ /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -c c_source.c Note rv_core \u306f gcc ver 9.2.0 \u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3063\u305f gcc ver 11.1.0 \u3067\u306f\u52d5\u4f5c\u4e0d\u5177\u5408\u304c\u767a\u751f\u3057\u305f\u304c\u3001\u539f\u56e0\u4e0d\u660e","title":"\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9 riscv32 gcc (for rv32emc)"},{"location":"x_env.html#rvsim-iss","text":"$ sudo apt install binutils-dev libreadline8 libtinfo6 libncurses-dev libreadline-dev $ git clone https://github.com/shin-yamashita/rv32emc $ cd rv32emc/rvsim $ make $ sudo make install # -> /usr/local/bin/rvsim","title":"rvsim (ISS)"},{"location":"x_env.html#target-board","text":"","title":"Target board"},{"location":"x_env.html#ultra96-v2","text":"\u30dc\u30fc\u30c9\u60c5\u5831: AVNET Ultra96 Vivado board files: Avnet Board Definition Files (BDF) PYNQ V2.7 Pre-built SD image v2.7 for Ultra96 version 2 Download : Ultra96v1-2.7.0.zip Use Etcher to image it onto 32GB Micro SD Card PYNQ Linux, based on Ubuntu 20.04 pynq ttyPS0 pynq login: xilinx (automatic login) Welcome to PYNQ Linux, based on Ubuntu 20.04 (GNU/Linux 5.4.0-xilinx-v2020.2 aarch64)","title":"Ultra96-v2"},{"location":"x_env.html#arty-a7-35t","text":"\u30dc\u30fc\u30c9\u60c5\u5831: Digilent Arty-A7 Reference Vivado board files: Vivado Board Files for Digilent FPGA Boards","title":"Arty-A7-35T"}]}