{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u306f\u3058\u3081\u306b \u00b6 \u7d44\u307f\u8fbc\u307f\u306b\u5411\u3051\u305f\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a RISC-V CPU \u30b3\u30a2\u306e\u5b9f\u88c5\u4f8b\u3067\u3042\u308b FPGA\u3078\u306e\u5b9f\u88c5\u3092\u884c\u3044\u3001 5th AI Edge Contest \u306e\u8ab2\u984c\u306b\u9069\u7528\u3057\u305f \u6982\u8981 \u00b6 RISC-V \u547d\u4ee4\u30bb\u30c3\u30c8\u306e rv32emc \u306b\u6e96\u62e0 E : 16 x 32bit \u6c4e\u7528 registers M : \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e57\u9664\u7b97\u5668 C : \u547d\u4ee4\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u524a\u6e1b\u306e\u305f\u3081\u3001compressed \u547d\u4ee4\u5bfe\u5fdc RTL (System Verilog) \u306b\u3088\u308b\u5b9f\u88c5 5\u6bb5\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 \u547d\u4ee4\u3001\u30c7\u30fc\u30bf \u5206\u96e2\u30d0\u30b9 32bit address range \u5272\u308a\u8fbc\u307f\uff08\uff11\u7cfb\u7d71\uff09 64bit \u30bf\u30a4\u30de\u30fc (mtime) \u53c2\u7167\u898f\u683c \u00b6 The RISC-V Instruction Set Manual Volume I: Unprivileged ISA The RISC-V Instruction Set Manual Volume II: Privileged Architecture \u516c\u958b\u30bd\u30fc\u30b9 \u00b6 rv32emc 5th-AI-Edge-Contest","title":"\u306f\u3058\u3081\u306b"},{"location":"index.html#_1","text":"\u7d44\u307f\u8fbc\u307f\u306b\u5411\u3051\u305f\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a RISC-V CPU \u30b3\u30a2\u306e\u5b9f\u88c5\u4f8b\u3067\u3042\u308b FPGA\u3078\u306e\u5b9f\u88c5\u3092\u884c\u3044\u3001 5th AI Edge Contest \u306e\u8ab2\u984c\u306b\u9069\u7528\u3057\u305f","title":"\u306f\u3058\u3081\u306b"},{"location":"index.html#_2","text":"RISC-V \u547d\u4ee4\u30bb\u30c3\u30c8\u306e rv32emc \u306b\u6e96\u62e0 E : 16 x 32bit \u6c4e\u7528 registers M : \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4e57\u9664\u7b97\u5668 C : \u547d\u4ee4\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u524a\u6e1b\u306e\u305f\u3081\u3001compressed \u547d\u4ee4\u5bfe\u5fdc RTL (System Verilog) \u306b\u3088\u308b\u5b9f\u88c5 5\u6bb5\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 \u547d\u4ee4\u3001\u30c7\u30fc\u30bf \u5206\u96e2\u30d0\u30b9 32bit address range \u5272\u308a\u8fbc\u307f\uff08\uff11\u7cfb\u7d71\uff09 64bit \u30bf\u30a4\u30de\u30fc (mtime)","title":"\u6982\u8981"},{"location":"index.html#_3","text":"The RISC-V Instruction Set Manual Volume I: Unprivileged ISA The RISC-V Instruction Set Manual Volume II: Privileged Architecture","title":"\u53c2\u7167\u898f\u683c"},{"location":"index.html#_4","text":"rv32emc 5th-AI-Edge-Contest","title":"\u516c\u958b\u30bd\u30fc\u30b9"},{"location":"10-iss.html","text":"\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf \u00b6 RTL \u5b9f\u88c5\u3092\u884c\u3046\u524d\u306b\u3001\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf(ISS)\u3092\u958b\u767a\u3057\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u7528\u3044\u305f\u3002 CPU \u30b3\u30a2\u958b\u767a\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 CPU\u306e\u30cf\u30fc\u30c9\u69cb\u6210\u3092\u8a2d\u8a08\u3057\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u307e\u3067\u6b63\u78ba\u306b\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u305f ISS \u3092\uff23\u8a00\u8a9e\u3067\u4f5c\u6210 \u2192 ISS \u3067\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c risc-v \u306e\u30af\u30ed\u30b9 gdb \u3067\u306e\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u7d50\u679c(\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9)\u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 ISS \u3092\u30c7\u30d0\u30c3\u30b0 \u4f5c\u6210\u3057\u305f ISS \u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 HDL(SystemVerilog) \u3092\u8a18\u8ff0\u3001ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068 HDL \u306e\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3(xsim) \u7d50\u679c\u3092\u3064\u304d\u5408\u308f\u305b\u3066HDL\u3092\u30c7\u30d0\u30c3\u30b0 ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068\u7a81\u304d\u5408\u308f\u305b\u3057\u3084\u3059\u3044\u5f62\u306e\u30c8\u30ec\u30fc\u30b9\u3092 HDL \u306e $display \u3067\u51fa\u529b\u3057\u30d0\u30b0\u306e\u8ffd\u8de1\u3092\u884c\u3063\u305f \u307e\u305f\u3001ISS \u7528\u306b\u4f5c\u6210\u3057\u305f\u547d\u4ee4\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057\u3066 HDL \u306e\u547d\u4ee4\u30c6\u30fc\u30d6\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u8a18\u8ff0\u30df\u30b9\u306a\u3069\u3092\u9632\u3044\u3060 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6b63\u3057\u3044\u5b9f\u884c\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u5272\u308a\u8fbc\u307f\u6a5f\u69cb\u3092\u5b9f\u88c5 uart \u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u63a5\u7d9a\u3001\u30bf\u30a4\u30de\u30fc(mtime) \u3067\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3001Vivado \u3067\u8ad6\u7406\u5408\u6210\u3092\u884c\u3044FPGA\u306b\u30ed\u30fc\u30c9\u3001\u5b9f\u6a5f\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u3064\u306a\u3044\u3067\u52d5\u4f5c\u78ba\u8a8d \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3067\u3001\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ed\u30fc\u30c9\u3001\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u66f4\u306b\u9577\u6642\u9593\u306e\u52d5\u4f5c\u691c\u8a3c\u3092\u884c\u3046 \u958b\u767a\u3057\u305f ISS (rvsim) \u00b6 source(github)","title":"\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf"},{"location":"10-iss.html#_1","text":"RTL \u5b9f\u88c5\u3092\u884c\u3046\u524d\u306b\u3001\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf(ISS)\u3092\u958b\u767a\u3057\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u7528\u3044\u305f\u3002 CPU \u30b3\u30a2\u958b\u767a\u306e\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002 CPU\u306e\u30cf\u30fc\u30c9\u69cb\u6210\u3092\u8a2d\u8a08\u3057\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u307e\u3067\u6b63\u78ba\u306b\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u305f ISS \u3092\uff23\u8a00\u8a9e\u3067\u4f5c\u6210 \u2192 ISS \u3067\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c risc-v \u306e\u30af\u30ed\u30b9 gdb \u3067\u306e\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u7d50\u679c(\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9)\u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 ISS \u3092\u30c7\u30d0\u30c3\u30b0 \u4f5c\u6210\u3057\u305f ISS \u3092\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u3057\u3066 HDL(SystemVerilog) \u3092\u8a18\u8ff0\u3001ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068 HDL \u306e\u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3(xsim) \u7d50\u679c\u3092\u3064\u304d\u5408\u308f\u305b\u3066HDL\u3092\u30c7\u30d0\u30c3\u30b0 ISS \u306e\u5b9f\u884c\u30c8\u30ec\u30fc\u30b9\u3068\u7a81\u304d\u5408\u308f\u305b\u3057\u3084\u3059\u3044\u5f62\u306e\u30c8\u30ec\u30fc\u30b9\u3092 HDL \u306e $display \u3067\u51fa\u529b\u3057\u30d0\u30b0\u306e\u8ffd\u8de1\u3092\u884c\u3063\u305f \u307e\u305f\u3001ISS \u7528\u306b\u4f5c\u6210\u3057\u305f\u547d\u4ee4\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057\u3066 HDL \u306e\u547d\u4ee4\u30c6\u30fc\u30d6\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u8a18\u8ff0\u30df\u30b9\u306a\u3069\u3092\u9632\u3044\u3060 \u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6b63\u3057\u3044\u5b9f\u884c\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u5272\u308a\u8fbc\u307f\u6a5f\u69cb\u3092\u5b9f\u88c5 uart \u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u63a5\u7d9a\u3001\u30bf\u30a4\u30de\u30fc(mtime) \u3067\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3001Vivado \u3067\u8ad6\u7406\u5408\u6210\u3092\u884c\u3044FPGA\u306b\u30ed\u30fc\u30c9\u3001\u5b9f\u6a5f\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u3064\u306a\u3044\u3067\u52d5\u4f5c\u78ba\u8a8d \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3067\u3001\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ed\u30fc\u30c9\u3001\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u66f4\u306b\u9577\u6642\u9593\u306e\u52d5\u4f5c\u691c\u8a3c\u3092\u884c\u3046","title":"\u547d\u4ee4\u30bb\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf"},{"location":"10-iss.html#iss-rvsim","text":"source(github)","title":"\u958b\u767a\u3057\u305f ISS (rvsim)"},{"location":"20-rv_core.html","text":"rv_core module \u00b6 rv_core \u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6709\u3059\u308b CPU \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b FPGA\u306b\u5b9f\u88c5\u3057\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u7528\u3044\u308b\u76ee\u7684\u3067\u3001\u6700\u5c0f\u9650\u306e\u4ed5\u69d8\u3092\u5b9f\u88c5\u3057\u305f \u547d\u4ee4\u30d0\u30b9\u3001\u30c7\u30fc\u30bf\u30d0\u30b9 \u5404 address 32bit / data 32bit \u5916\u90e8\u5272\u308a\u8fbc\u307f 1\u7cfb\u7d71 \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u3001\u30bf\u30a4\u30de\u30fc\u30b3\u30f3\u30da\u30a2\u5272\u308a\u8fbc\u307f \u5165\u51fa\u529b \u00b6 typedef logic [ 3 : 0 ] u4_t ; typedef logic [ 31 : 0 ] u32_t ; module rv_core #( parameter debug = 0 ) ( input logic clk , // clock input logic xreset , // 0:\u30ea\u30bb\u30c3\u30c8 // ---- \u547d\u4ee4\u30d0\u30b9 ---- output u32_t i_adr , // address (byte address) input u32_t i_dr , // read data (\u547d\u4ee4) output logic i_re , // read enable input logic i_rdy , // data ready // ---- \u30c7\u30fc\u30bf\u30d0\u30b9 ---- output u32_t d_adr , // address (byte address) input u32_t d_dr , // read data output logic d_re , // read enable output u32_t d_dw , // write data output u4_t d_we , // write enable (byte enable) input logic d_rdy , // data ready input logic d_be , // big endian input logic irq // interrupt request ); Memory map \u00b6 rv_core \u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3067\u3042\u308b \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c 0x0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b 0xFFFF0000 \u756a\u5730\u4ee5\u964d\u3092\u30e1\u30e2\u30ea\u30de\u30c3\u30d7 I/O \u9818\u57df\u3068\u3057\u305f \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc(mtime)\u3001\u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf(mtimecmp) \u306f 0xFFFF8000, 0xFFFF8008 \u306b\u914d\u7f6e\u3057\u305f Address Description 0x00000000 reset start address \u3000\u3000\uff1a \u547d\u4ee4/\u30c7\u30fc\u30bf\u9818\u57df \u547d\u4ee4\uff1a16bit align / \u30c7\u30fc\u30bf:32bit align 0xFFFF0000 ~ 0xFFFFFFF I/O \u9818\u57df 0xFFFF8000 mtime 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc 0xFFFF8008 mtimecmp 64bit \u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf CSR Control and Status Register \u00b6 ISA\u30de\u30cb\u30e5\u30a2\u30eb vol II \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b CSR \u306e\u3046\u3061\u3001\u4ee5\u4e0b\u306e CSR \u3092\u5b9f\u88c5\u3057\u305f \u4e3b\u306b\u30bf\u30a4\u30de\u30fc\u3001\u53ca\u3073\u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u5236\u5fa1\u306b\u7528\u3044\u308b \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5272\u308a\u8fbc\u307f\u306f\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044 Number Privilege Name Description 0x305 MRW mtvec Machine trap-handler base address 0x304 MRW mie Machine interrupt-enable register b11:MEIE b7:MTIE 0x344 MRW mip Machine interrupt pending b11:MEIP b7:MTIP 0x341 MRW mepc Machine exception program counter 0x341 MRW mcause Machine trap cause 0xC01 URO time Timer for rdtime instruction 0xC81 URO timeh Upper 32bits of time (for rdtimeh insn) Symbol Description MRW Machine level read/write URO User level read-only MEIE External interrupt enable MEIP External interrupt pending MTIE timer interrupt enable MTIP timer interrupt pending \u547d\u4ee4/\u30c7\u30fc\u30bf\u30d0\u30b9\u63a5\u7d9a \u00b6 \u547d\u4ee4\u30d0\u30b9\u306f compress \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u300116bit align \u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b \u547d\u4ee4\u30e1\u30e2\u30ea\u306f\u300116bit align \u3067 32bit \u8aad\u307f\u51fa\u3057\u304c\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308b \u30c7\u30fc\u30bf\u30d0\u30b9\u306f\u30c7\u30fc\u30bf\u30e1\u30e2\u30ea\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u63a5\u7d9a\u3059\u308b 32bit \u30d0\u30b9\u3067\u3042\u308b\u304c\u3001write enable d_we[3:0] \u306b\u3088\u308a\u3001byte/16bit/32bit \u30a2\u30af\u30bb\u30b9\u3092\u884c\u3046 read \u6642\u3082\u3001\u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306b\u5fdc\u3058\u3066 32bit \u30c7\u30fc\u30bf\u306e\u5fc5\u8981\u306a byte \u3092\u53d6\u308a\u8fbc\u3080 32bit \u30c7\u30fc\u30bf\u5185\u306e\u30d0\u30a4\u30c8\u30a2\u30af\u30bb\u30b9\u9806\u306f little endian \u3067\u3042\u308b\u304c\u3001d_be \u4fe1\u53f7\u3092 assert \u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001 big endian \u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b read / write \u5404 1 clock cycle \u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u304c\u3001rdy \u4fe1\u53f7\u3092\u4efb\u610f\u30b5\u30a4\u30af\u30eb de-assert \u3059\u308b\u3053\u3068\u3067 cycle \u3092\u5ef6\u9577\u3067\u304d\u308b bus timing \u00b6 \u547d\u4ee4\u30d0\u30b9 read timing i_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001i_adr \u306b\u5bfe\u5fdc\u3059\u308b\u547d\u4ee4\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 i_dr \u306b\u8fd4\u3059 i_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 i_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b \u30c7\u30fc\u30bf\u30d0\u30b9 write timing d_we[3:0] \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u30d0\u30a4\u30c8\u306b d_dw \u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b \u30c7\u30fc\u30bf\u30d0\u30b9 read timing d_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 d_dr \u306b\u8fd4\u3059 d_dr \u306f\u30e1\u30e2\u30ea\u3001\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u7fa4\u306e\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3092 or \u3059\u308b\u306e\u3067\u3001\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf\u304c\u6709\u52b9\u3067\u306a\u3044\u3068\u304d\u306f 0x0 \u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_dr \u306e\u8aad\u307f\u8fbc\u307f\u30d0\u30a4\u30c8\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b \u30c7\u30fc\u30bf\u30d0\u30b9 byte addressing d_dr/d_dw 32bit \u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u9806\u5e8f\u3092\u793a\u3059 d_be \u306b\u3088\u308b endian \u5207\u308a\u66ff\u3048\u3092\u56f3\u793a\u3059\u308b Reset, Interrupt \u00b6 \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ea\u30bb\u30c3\u30c8\u6642\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf pc \u306f 0x0 \u306b\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u6642 0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b \u5272\u308a\u8fbc\u307f\u306f\u3001rv_core \u5185\u81d3\u306e 64bit \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u3068\u3001\u5916\u90e8\u7aef\u5b50 irq \u306b\u3088\u308b\u5272\u308a\u8fbc\u307f\u3092\u5b9f\u88c5\u3057\u305f \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c\u306e\u521d\u671f\u5316\u30eb\u30fc\u30c1\u30f3\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306e\u8a2d\u5b9a\u3068\u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306e\u30d9\u30af\u30bf\u30fc(mtvec)\u8a2d\u5b9a\u3092\u884c\u3046 example: crt0.S la sp , __stack_top # stack pointer \u8a2d\u5b9a la t0 , _irq_handle # \u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u30a2\u30c9\u30ec\u30b9 csrw mtvec , t0 # mtvec \u306b\u8a2d\u5b9a \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf mtime \u306f\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c clock \u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u7d9a\u3051\u308b\u3002 mie \u30ec\u30b8\u30b9\u30bf MTIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 mtime > mtimecmp \u3068\u306a\u308a\u3001mie.MTIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MTIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u8981\u56e0\u306f mtimecmp \u306e\u5024\u3092\u66f4\u65b0\uff08\u6b21\u306e\u5272\u308a\u8fbc\u307f\u3092\u671f\u5f85\u3059\u308b\u30ab\u30a6\u30f3\u30bf\u5024\u306b\u66f4\u65b0\uff09\u3059\u308b\u304b\u3001\u307e\u305f\u306f mie.MTIE \u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u30af\u30ea\u30a2\u3059\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f mie \u30ec\u30b8\u30b9\u30bf MEIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5916\u90e8\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u7aef\u5b50 irq \u304c 1 \u3067\u3001mie.MEIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MEIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u8981\u56e0\u8abf\u67fb\u3001\u8981\u56e0\u30af\u30ea\u30a2\u306f\u3001\u5404\u5916\u90e8\u56de\u8def\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3002 \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u9020 \u00b6","title":"rv_core module"},{"location":"20-rv_core.html#rv_core-module","text":"rv_core \u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6709\u3059\u308b CPU \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b FPGA\u306b\u5b9f\u88c5\u3057\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u7528\u3044\u308b\u76ee\u7684\u3067\u3001\u6700\u5c0f\u9650\u306e\u4ed5\u69d8\u3092\u5b9f\u88c5\u3057\u305f \u547d\u4ee4\u30d0\u30b9\u3001\u30c7\u30fc\u30bf\u30d0\u30b9 \u5404 address 32bit / data 32bit \u5916\u90e8\u5272\u308a\u8fbc\u307f 1\u7cfb\u7d71 \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u3001\u30bf\u30a4\u30de\u30fc\u30b3\u30f3\u30da\u30a2\u5272\u308a\u8fbc\u307f","title":"rv_core module"},{"location":"20-rv_core.html#_1","text":"typedef logic [ 3 : 0 ] u4_t ; typedef logic [ 31 : 0 ] u32_t ; module rv_core #( parameter debug = 0 ) ( input logic clk , // clock input logic xreset , // 0:\u30ea\u30bb\u30c3\u30c8 // ---- \u547d\u4ee4\u30d0\u30b9 ---- output u32_t i_adr , // address (byte address) input u32_t i_dr , // read data (\u547d\u4ee4) output logic i_re , // read enable input logic i_rdy , // data ready // ---- \u30c7\u30fc\u30bf\u30d0\u30b9 ---- output u32_t d_adr , // address (byte address) input u32_t d_dr , // read data output logic d_re , // read enable output u32_t d_dw , // write data output u4_t d_we , // write enable (byte enable) input logic d_rdy , // data ready input logic d_be , // big endian input logic irq // interrupt request );","title":"\u5165\u51fa\u529b"},{"location":"20-rv_core.html#memory-map","text":"rv_core \u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3067\u3042\u308b \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c 0x0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b 0xFFFF0000 \u756a\u5730\u4ee5\u964d\u3092\u30e1\u30e2\u30ea\u30de\u30c3\u30d7 I/O \u9818\u57df\u3068\u3057\u305f \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc(mtime)\u3001\u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf(mtimecmp) \u306f 0xFFFF8000, 0xFFFF8008 \u306b\u914d\u7f6e\u3057\u305f Address Description 0x00000000 reset start address \u3000\u3000\uff1a \u547d\u4ee4/\u30c7\u30fc\u30bf\u9818\u57df \u547d\u4ee4\uff1a16bit align / \u30c7\u30fc\u30bf:32bit align 0xFFFF0000 ~ 0xFFFFFFF I/O \u9818\u57df 0xFFFF8000 mtime 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc 0xFFFF8008 mtimecmp 64bit \u30bf\u30a4\u30de\u30fc\u6bd4\u8f03\u30ec\u30b8\u30b9\u30bf","title":"Memory map"},{"location":"20-rv_core.html#csr-control-and-status-register","text":"ISA\u30de\u30cb\u30e5\u30a2\u30eb vol II \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b CSR \u306e\u3046\u3061\u3001\u4ee5\u4e0b\u306e CSR \u3092\u5b9f\u88c5\u3057\u305f \u4e3b\u306b\u30bf\u30a4\u30de\u30fc\u3001\u53ca\u3073\u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u5236\u5fa1\u306b\u7528\u3044\u308b \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5272\u308a\u8fbc\u307f\u306f\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044 Number Privilege Name Description 0x305 MRW mtvec Machine trap-handler base address 0x304 MRW mie Machine interrupt-enable register b11:MEIE b7:MTIE 0x344 MRW mip Machine interrupt pending b11:MEIP b7:MTIP 0x341 MRW mepc Machine exception program counter 0x341 MRW mcause Machine trap cause 0xC01 URO time Timer for rdtime instruction 0xC81 URO timeh Upper 32bits of time (for rdtimeh insn) Symbol Description MRW Machine level read/write URO User level read-only MEIE External interrupt enable MEIP External interrupt pending MTIE timer interrupt enable MTIP timer interrupt pending","title":"CSR Control and Status Register"},{"location":"20-rv_core.html#_2","text":"\u547d\u4ee4\u30d0\u30b9\u306f compress \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u300116bit align \u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b \u547d\u4ee4\u30e1\u30e2\u30ea\u306f\u300116bit align \u3067 32bit \u8aad\u307f\u51fa\u3057\u304c\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308b \u30c7\u30fc\u30bf\u30d0\u30b9\u306f\u30c7\u30fc\u30bf\u30e1\u30e2\u30ea\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u63a5\u7d9a\u3059\u308b 32bit \u30d0\u30b9\u3067\u3042\u308b\u304c\u3001write enable d_we[3:0] \u306b\u3088\u308a\u3001byte/16bit/32bit \u30a2\u30af\u30bb\u30b9\u3092\u884c\u3046 read \u6642\u3082\u3001\u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306b\u5fdc\u3058\u3066 32bit \u30c7\u30fc\u30bf\u306e\u5fc5\u8981\u306a byte \u3092\u53d6\u308a\u8fbc\u3080 32bit \u30c7\u30fc\u30bf\u5185\u306e\u30d0\u30a4\u30c8\u30a2\u30af\u30bb\u30b9\u9806\u306f little endian \u3067\u3042\u308b\u304c\u3001d_be \u4fe1\u53f7\u3092 assert \u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001 big endian \u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b read / write \u5404 1 clock cycle \u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u304c\u3001rdy \u4fe1\u53f7\u3092\u4efb\u610f\u30b5\u30a4\u30af\u30eb de-assert \u3059\u308b\u3053\u3068\u3067 cycle \u3092\u5ef6\u9577\u3067\u304d\u308b","title":"\u547d\u4ee4/\u30c7\u30fc\u30bf\u30d0\u30b9\u63a5\u7d9a"},{"location":"20-rv_core.html#bus-timing","text":"\u547d\u4ee4\u30d0\u30b9 read timing i_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001i_adr \u306b\u5bfe\u5fdc\u3059\u308b\u547d\u4ee4\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 i_dr \u306b\u8fd4\u3059 i_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 i_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b \u30c7\u30fc\u30bf\u30d0\u30b9 write timing d_we[3:0] \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u30d0\u30a4\u30c8\u306b d_dw \u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_we \u306e\u30d0\u30a4\u30c8\u30a4\u30cd\u30fc\u30d6\u30eb\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b \u30c7\u30fc\u30bf\u30d0\u30b9 read timing d_re \u304c assert \u3055\u308c\u305f\u3068\u304d\u3001d_adr \u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3057\u3001 \u6b21\u306e\u30b5\u30a4\u30af\u30eb \u3067 d_dr \u306b\u8fd4\u3059 d_dr \u306f\u30e1\u30e2\u30ea\u3001\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u7fa4\u306e\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3092 or \u3059\u308b\u306e\u3067\u3001\u5404\u30d6\u30ed\u30c3\u30af\u306e\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf\u304c\u6709\u52b9\u3067\u306a\u3044\u3068\u304d\u306f 0x0 \u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b d_be \u3092 assert \u3059\u308b\u3053\u3068\u3067\u3001d_dr \u306e\u8aad\u307f\u8fbc\u307f\u30d0\u30a4\u30c8\u9806\u5e8f\u3092 big endian \u76f8\u5f53\u306b\u5909\u66f4\u3067\u304d\u308b d_adr \u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 d_rdy \u3092 de-assert \u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30af\u30bb\u30b9\u30b5\u30a4\u30af\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u308b \u30c7\u30fc\u30bf\u30d0\u30b9 byte addressing d_dr/d_dw 32bit \u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u9806\u5e8f\u3092\u793a\u3059 d_be \u306b\u3088\u308b endian \u5207\u308a\u66ff\u3048\u3092\u56f3\u793a\u3059\u308b","title":"bus timing"},{"location":"20-rv_core.html#reset-interrupt","text":"\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ea\u30bb\u30c3\u30c8\u6642\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf pc \u306f 0x0 \u306b\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u6642 0 \u756a\u5730\u304b\u3089\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b \u5272\u308a\u8fbc\u307f\u306f\u3001rv_core \u5185\u81d3\u306e 64bit \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u3068\u3001\u5916\u90e8\u7aef\u5b50 irq \u306b\u3088\u308b\u5272\u308a\u8fbc\u307f\u3092\u5b9f\u88c5\u3057\u305f \u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c\u306e\u521d\u671f\u5316\u30eb\u30fc\u30c1\u30f3\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u30dd\u30a4\u30f3\u30bf\u306e\u8a2d\u5b9a\u3068\u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306e\u30d9\u30af\u30bf\u30fc(mtvec)\u8a2d\u5b9a\u3092\u884c\u3046 example: crt0.S la sp , __stack_top # stack pointer \u8a2d\u5b9a la t0 , _irq_handle # \u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u30a2\u30c9\u30ec\u30b9 csrw mtvec , t0 # mtvec \u306b\u8a2d\u5b9a \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f 64bit \u30bf\u30a4\u30de\u30fc\u30ab\u30a6\u30f3\u30bf mtime \u306f\u3001\u30ea\u30bb\u30c3\u30c8\u89e3\u9664\u5f8c clock \u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u7d9a\u3051\u308b\u3002 mie \u30ec\u30b8\u30b9\u30bf MTIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 mtime > mtimecmp \u3068\u306a\u308a\u3001mie.MTIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MTIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u30bf\u30a4\u30de\u30fc\u5272\u308a\u8fbc\u307f\u8981\u56e0\u306f mtimecmp \u306e\u5024\u3092\u66f4\u65b0\uff08\u6b21\u306e\u5272\u308a\u8fbc\u307f\u3092\u671f\u5f85\u3059\u308b\u30ab\u30a6\u30f3\u30bf\u5024\u306b\u66f4\u65b0\uff09\u3059\u308b\u304b\u3001\u307e\u305f\u306f mie.MTIE \u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u30af\u30ea\u30a2\u3059\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f mie \u30ec\u30b8\u30b9\u30bf MEIE \u30d3\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5916\u90e8\u5272\u308a\u8fbc\u307f\u304c\u8a31\u53ef\u3055\u308c\u308b\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u7aef\u5b50 irq \u304c 1 \u3067\u3001mie.MEIE \u304c 1 \u306e\u3068\u304d\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3057\u3001mip.MEIP \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3001pc \u3092 mepc \u306b\u30bb\u30fc\u30d6\u3057\u3066 mtvec \u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3059\u30a2\u30c9\u30ec\u30b9\u306b\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3002 \u5272\u308a\u8fbc\u307f\u51e6\u7406\u30eb\u30fc\u30c1\u30f3\u306f\u3001\u5272\u308a\u8fbc\u307f\u8981\u56e0\u3092\u8abf\u3079\u3001\u8981\u56e0\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002 \u5916\u90e8\u5272\u308a\u8fbc\u307f\u306e\u8981\u56e0\u8abf\u67fb\u3001\u8981\u56e0\u30af\u30ea\u30a2\u306f\u3001\u5404\u5916\u90e8\u56de\u8def\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3002","title":"Reset, Interrupt"},{"location":"20-rv_core.html#_3","text":"","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u9020"},{"location":"30-fpga.html","text":"FPGA \u5b9f\u88c5 \u00b6 rv_core \u306e\u52d5\u4f5c\u3092 Xilinx Artix7 FPGA \u3067\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b example design \u3092\u7528\u610f\u3057\u305f\u3002 Taget board : Arty-A7 source(github) rv32emc/rv_core/ example design \u00b6 rv_core \u3068\u30e1\u30e2\u30ea dpram\u3001\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u56de\u8def rv_sio \u3092\u63a5\u7d9a\u3057\u305f\u56de\u8def rvc.sv \u3092\u7528\u610f\u3057\u3001Arty-A7-35 \u30dc\u30fc\u30c9\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002 rv_core/syn \u251c\u2500\u2500 build.sh # \u8ad6\u7406\u5408\u6210\u30b9\u30af\u30ea\u30d7\u30c8 \u251c\u2500\u2500 build.tcl # vivado tcl scripts \u251c\u2500\u2500 read_hdl.tcl \u251c\u2500\u2500 write_mmi.tcl \u251c\u2500\u2500 arty-a7-pinassign.xdc # \u5236\u7d04\u30d5\u30a1\u30a4\u30eb\u3001timing / pin assign \u251c\u2500\u2500 chgmem.sh # rev/rvc.bit \u30d5\u30a1\u30a4\u30eb\u306e RAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b \u251c\u2500\u2500 config.sh # Arty-A7 FPGA\u306b rev/rvc.bit \u3092\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 \u251c\u2500\u2500 program.sh # Arty-A7 \u306e spi flash \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 rvc.sv # top module \u251c\u2500\u2500 clk_gen.xcix # clock \u751f\u6210 PLL // rvc.sv module rvc #( parameter debug = 0 ) ( input logic clk , // Arty-A7 \u306e\u30b7\u30b9\u30c6\u30e0\u30af\u30ed\u30c3\u30af(100MHz)\u3092\u5165\u529b\u3001rvc\u5185\u90e8\u306ePLL\u3067CPU\u30af\u30ed\u30c3\u30af\u3092\u751f\u6210 input u8_t pin , // 8bit pararell \u5165\u529b SW \u306b\u63a5\u7d9a output u8_t pout , // 8bit pararell \u51fa\u529b LED \u306b\u63a5\u7d9a input logic rxd , // \u30b7\u30ea\u30a2\u30eb\u30bf\u30fc\u30df\u30ca\u30eb output logic txd ); \u5165\u51fa\u529b\u30dd\u30fc\u30c8\u306e\u63a5\u7d9a\u5148\u306f\u3001 arty-a7-pinassign.xdc \u3092\u53c2\u7167\u3002 \u51e6\u7406\u306e\u6d41\u308c \u00b6 rv_core \u3067\u5b9f\u884c\u3059\u308b program \u3092\u7528\u610f \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 rvmon \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u74b0\u5883\u3092\u7528\u610f\u3057\u3001rvmon \u3092\u30b3\u30f3\u30d1\u30a4\u30eb \u2192 \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea(rvmon)\u3092\u4f5c\u6210\u3057\u3001\u30e1\u30e2\u30ea\u306e\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u306b\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f (prog_u.mem, prog_l.mem) \u306b\u5909\u63db\u3059\u308b\u3002 $ cd rv32emc/rvmon $ make # rvmon \u3092\u4f5c\u6210 $ make install # ../rv_core/syn/ \u306b\u30e1\u30e2\u30ea\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb # /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O binary -S -R .stack rvmon rvmon.bin # od -An -tx4 -v rvmon.bin > rvmon.mem # ./convmem.py rvmon.mem # cp -p prog_u.mem prog_l.mem ../rv_core/syn/ # cp -p rvmon ../rv_core/syn/rvmon.elf rvmon.mem \u306f \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u3001\u8ad6\u7406\u5408\u6210\u6642\u306b verilog \u306e $readmemh() \u3067\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f\u3002 dpram \u3067\u306f 32bit \u30ef\u30fc\u30c9\u306e \u4e0a\u4f4d\u3001\u4e0b\u4f4d 16bit \u306b\u5206\u3051\u305f\u521d\u671f\u5316\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5909\u63db\u3059\u308b\u3002 // dpram.sv dpram #(. ADDR_WIDTH ( 13 ), . init_file_u ( \"prog_u.mem\" ), // upper 16bit (31:16) initial data . init_file_l ( \"prog_l.mem\" ) // lower 16bit (15:0) initial data ) u_dpram ( \u8ad6\u7406\u5408\u6210\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 Vivado (2020.2) \u3067\u8ad6\u7406\u5408\u6210\u3002 build.sh \u3067\u5408\u6210\u6642\u3001prog_u.mem prog_l.mem \u30d5\u30a1\u30a4\u30eb\u3067 RAM \u3092\u521d\u671f\u5316\u3002 $ cd ../rv_core/syn $ ./build.sh # vivado \u3067 hdl \u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8ad6\u7406\u5408\u6210 # FPGA\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 rev/rvc.bit \u3092\u751f\u6210 # rev/ \u306e\u4e0b\u306b\u5404\u7a2e\u30ec\u30dd\u30fc\u30c8\u3092\u751f\u6210 $ ./config.sh # bit file \u3092 FPGA \u306b\u30ed\u30fc\u30c9 $ ./program.sh # bit file \u3092 Arty-A7 \u306e ROM \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u5408\u6210\u6e08\u307f bit file \u4e2d\u306e RAM \u306e\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b \u5408\u6210\u6642\u3001write_mmi.tcl \u3067 block RAM \u306e\u914d\u7f6e\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u30d5\u30a1\u30a4\u30eb prog.mmi \u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3002 Vivado \u306e updatemem \u30c4\u30fc\u30eb\u3067 bit file \u3092\u8aad\u307f\u8fbc\u307f\u3001 prog.mmi \u306b\u3057\u305f\u304c\u3063\u3066 BRAM \u306e\u521d\u671f\u5024\u3092\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u751f\u6210\u3057\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb(elf \u5f62\u5f0f)\u306e\u5185\u5bb9\u306b\u66f8\u304d\u63db\u3048\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 # chgmem.sh $ updatemem -meminfo prog.mmi -data $elf -bit rev/rvc.bit -proc u_dpram -force -out rvcchg.bit \u518d\u5408\u6210\u3059\u308b\u3053\u3068\u306a\u304f BRAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 write_mmi.tcl \u306f dpram \u306e\u69cb\u6210\u306b\u5bfe\u5fdc\u3057\u3066\u8a18\u8ff0\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c \u00b6 Arty-A7 \u306b\u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0(rvmon) \u3092\u30ed\u30fc\u30c9\u3057\u3001USB-UART \u7d4c\u7531\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u63a5\u7d9a\u3059\u308b\u3002 $ cd ../../rvmon/term $ make $ ./term 0 : usb-Xilinx_JTAG+Serial_1234-oj1-if01-port0 1 : usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 select port ( 0 ~1 ) : 1 *** open '/dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0' rvmon$ help d { addr } : dump memory l { cmd ( .mot )} : load S-record file go : exec cmd ( @0x4000 ) rvmon$ # Ctrl-Alt-'C' \u3067\u7d42\u4e86 lrwxrwxrwx 1 root root 13 Apr 23 08:45 /dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 -> ../../ttyUSB2 crw-rw---- 1 root dialout 188, 2 Apr 23 22:45 /dev/ttyUSB2 ** 'dialout' group \u3092\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u306b\u52a0\u3048\u3066\u304a\u304f\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u6a29\u9650\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002","title":"FPGA \u5b9f\u88c5"},{"location":"30-fpga.html#fpga","text":"rv_core \u306e\u52d5\u4f5c\u3092 Xilinx Artix7 FPGA \u3067\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b example design \u3092\u7528\u610f\u3057\u305f\u3002 Taget board : Arty-A7 source(github) rv32emc/rv_core/","title":"FPGA \u5b9f\u88c5"},{"location":"30-fpga.html#example-design","text":"rv_core \u3068\u30e1\u30e2\u30ea dpram\u3001\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u56de\u8def rv_sio \u3092\u63a5\u7d9a\u3057\u305f\u56de\u8def rvc.sv \u3092\u7528\u610f\u3057\u3001Arty-A7-35 \u30dc\u30fc\u30c9\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002 rv_core/syn \u251c\u2500\u2500 build.sh # \u8ad6\u7406\u5408\u6210\u30b9\u30af\u30ea\u30d7\u30c8 \u251c\u2500\u2500 build.tcl # vivado tcl scripts \u251c\u2500\u2500 read_hdl.tcl \u251c\u2500\u2500 write_mmi.tcl \u251c\u2500\u2500 arty-a7-pinassign.xdc # \u5236\u7d04\u30d5\u30a1\u30a4\u30eb\u3001timing / pin assign \u251c\u2500\u2500 chgmem.sh # rev/rvc.bit \u30d5\u30a1\u30a4\u30eb\u306e RAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b \u251c\u2500\u2500 config.sh # Arty-A7 FPGA\u306b rev/rvc.bit \u3092\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 \u251c\u2500\u2500 program.sh # Arty-A7 \u306e spi flash \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u251c\u2500\u2500 rvc.sv # top module \u251c\u2500\u2500 clk_gen.xcix # clock \u751f\u6210 PLL // rvc.sv module rvc #( parameter debug = 0 ) ( input logic clk , // Arty-A7 \u306e\u30b7\u30b9\u30c6\u30e0\u30af\u30ed\u30c3\u30af(100MHz)\u3092\u5165\u529b\u3001rvc\u5185\u90e8\u306ePLL\u3067CPU\u30af\u30ed\u30c3\u30af\u3092\u751f\u6210 input u8_t pin , // 8bit pararell \u5165\u529b SW \u306b\u63a5\u7d9a output u8_t pout , // 8bit pararell \u51fa\u529b LED \u306b\u63a5\u7d9a input logic rxd , // \u30b7\u30ea\u30a2\u30eb\u30bf\u30fc\u30df\u30ca\u30eb output logic txd ); \u5165\u51fa\u529b\u30dd\u30fc\u30c8\u306e\u63a5\u7d9a\u5148\u306f\u3001 arty-a7-pinassign.xdc \u3092\u53c2\u7167\u3002","title":"example design"},{"location":"30-fpga.html#_1","text":"rv_core \u3067\u5b9f\u884c\u3059\u308b program \u3092\u7528\u610f \u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0 rvmon \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u74b0\u5883\u3092\u7528\u610f\u3057\u3001rvmon \u3092\u30b3\u30f3\u30d1\u30a4\u30eb \u2192 \u5b9f\u884c\u30d0\u30a4\u30ca\u30ea(rvmon)\u3092\u4f5c\u6210\u3057\u3001\u30e1\u30e2\u30ea\u306e\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u306b\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f (prog_u.mem, prog_l.mem) \u306b\u5909\u63db\u3059\u308b\u3002 $ cd rv32emc/rvmon $ make # rvmon \u3092\u4f5c\u6210 $ make install # ../rv_core/syn/ \u306b\u30e1\u30e2\u30ea\u521d\u671f\u30d1\u30bf\u30fc\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb # /opt/rv32e/bin/riscv32-unknown-elf-objcopy -O binary -S -R .stack rvmon rvmon.bin # od -An -tx4 -v rvmon.bin > rvmon.mem # ./convmem.py rvmon.mem # cp -p prog_u.mem prog_l.mem ../rv_core/syn/ # cp -p rvmon ../rv_core/syn/rvmon.elf rvmon.mem \u306f \u8ad6\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u3001\u8ad6\u7406\u5408\u6210\u6642\u306b verilog \u306e $readmemh() \u3067\u8aad\u307f\u8fbc\u3080\u5f62\u5f0f\u3002 dpram \u3067\u306f 32bit \u30ef\u30fc\u30c9\u306e \u4e0a\u4f4d\u3001\u4e0b\u4f4d 16bit \u306b\u5206\u3051\u305f\u521d\u671f\u5316\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5909\u63db\u3059\u308b\u3002 // dpram.sv dpram #(. ADDR_WIDTH ( 13 ), . init_file_u ( \"prog_u.mem\" ), // upper 16bit (31:16) initial data . init_file_l ( \"prog_l.mem\" ) // lower 16bit (15:0) initial data ) u_dpram ( \u8ad6\u7406\u5408\u6210\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3 Vivado (2020.2) \u3067\u8ad6\u7406\u5408\u6210\u3002 build.sh \u3067\u5408\u6210\u6642\u3001prog_u.mem prog_l.mem \u30d5\u30a1\u30a4\u30eb\u3067 RAM \u3092\u521d\u671f\u5316\u3002 $ cd ../rv_core/syn $ ./build.sh # vivado \u3067 hdl \u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8ad6\u7406\u5408\u6210 # FPGA\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 rev/rvc.bit \u3092\u751f\u6210 # rev/ \u306e\u4e0b\u306b\u5404\u7a2e\u30ec\u30dd\u30fc\u30c8\u3092\u751f\u6210 $ ./config.sh # bit file \u3092 FPGA \u306b\u30ed\u30fc\u30c9 $ ./program.sh # bit file \u3092 Arty-A7 \u306e ROM \u306b\u30d7\u30ed\u30b0\u30e9\u30e0 \u5408\u6210\u6e08\u307f bit file \u4e2d\u306e RAM \u306e\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b \u5408\u6210\u6642\u3001write_mmi.tcl \u3067 block RAM \u306e\u914d\u7f6e\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u30d5\u30a1\u30a4\u30eb prog.mmi \u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3002 Vivado \u306e updatemem \u30c4\u30fc\u30eb\u3067 bit file \u3092\u8aad\u307f\u8fbc\u307f\u3001 prog.mmi \u306b\u3057\u305f\u304c\u3063\u3066 BRAM \u306e\u521d\u671f\u5024\u3092\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u751f\u6210\u3057\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb(elf \u5f62\u5f0f)\u306e\u5185\u5bb9\u306b\u66f8\u304d\u63db\u3048\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 # chgmem.sh $ updatemem -meminfo prog.mmi -data $elf -bit rev/rvc.bit -proc u_dpram -force -out rvcchg.bit \u518d\u5408\u6210\u3059\u308b\u3053\u3068\u306a\u304f BRAM \u306e\u521d\u671f\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 write_mmi.tcl \u306f dpram \u306e\u69cb\u6210\u306b\u5bfe\u5fdc\u3057\u3066\u8a18\u8ff0\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","title":"\u51e6\u7406\u306e\u6d41\u308c"},{"location":"30-fpga.html#_2","text":"Arty-A7 \u306b\u30e2\u30cb\u30bf\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0(rvmon) \u3092\u30ed\u30fc\u30c9\u3057\u3001USB-UART \u7d4c\u7531\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u63a5\u7d9a\u3059\u308b\u3002 $ cd ../../rvmon/term $ make $ ./term 0 : usb-Xilinx_JTAG+Serial_1234-oj1-if01-port0 1 : usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 select port ( 0 ~1 ) : 1 *** open '/dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0' rvmon$ help d { addr } : dump memory l { cmd ( .mot )} : load S-record file go : exec cmd ( @0x4000 ) rvmon$ # Ctrl-Alt-'C' \u3067\u7d42\u4e86 lrwxrwxrwx 1 root root 13 Apr 23 08:45 /dev/serial/by-id/usb-Digilent_Digilent_USB_Device_210319B26865-if01-port0 -> ../../ttyUSB2 crw-rw---- 1 root dialout 188, 2 Apr 23 22:45 /dev/ttyUSB2 ** 'dialout' group \u3092\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u306b\u52a0\u3048\u3066\u304a\u304f\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u6a29\u9650\u3067\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c"},{"location":"x_env.html","text":"\u958b\u767a\u74b0\u5883 \u00b6 Host \u00b6 Ubuntu 20.04 \u4e0a\u3067\u958b\u767a\u3092\u884c\u3063\u305f FPGA \u958b\u767a\u30c4\u30fc\u30eb \u00b6 Vivado/2020.2 /opt/Xilinx/Vivado \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Vivado_Lab/2020.2 /opt/Xilinx/Vivado_Lab \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bf\u30fc\u30b2\u30c3\u30c8\u30dc\u30fc\u30c9\u3092 USB \u3067\u63a5\u7d9a\u3059\u308b\u30de\u30b7\u30f3\u304c Disk \u5bb9\u91cf\u4e0d\u8db3\u3067 Vivado \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u306e\u3067\u3001Vivado_Lab \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066 Host \u304b\u3089 remote \u3067\u5236\u5fa1\u3057\u305f \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9 riscv32 gcc (for rv32emc) \u00b6 RISC-V \u306e RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d3\u30eb\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb $ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk \\ build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev # gcc \u306e build \u3067\u5fc5\u8981\u3068\u306a\u308b\u30c4\u30fc\u30eb Prerequisites $ sudo mkdir /opt/rv32e # cross tool \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148 $ git clone --branch rvv-0.9.x --recursive https://github.com/riscv/riscv-gnu-toolchain $ cd riscv-gnu-toolchain $ patch -p1 < riscv-gdb-sim.patch # run \u306e\u4fee\u6b63 patch $ ./configure --prefix = /opt/rv32e --disable-linux --with-arch = rv32emac --with-abi = ilp32e $ make newlib # \u30c4\u30fc\u30eb\u7fa4\u3092 /opt/rv32e/ \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3001\u66f8\u304d\u8fbc\u307f\u6a29\u9650\u304c\u5fc5\u8981 Download: riscv-gdb-sim.patch gdb \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u306e\u4fee\u6b63 patch cross gdb \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3002 run \u306e syscall \u306f RV32E \u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001write(), exit() \u306a\u3069\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002 newlib \u3067\u306f syscall \u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001RV32E \u306e\u307f syscall_id \u3092\u6e21\u3059\u30ec\u30b8\u30b9\u30bf\u304c\u7570\u306a\u308b\u3002 riscv-newlib/libgloss/riscv/internal_syscall.h \u30fbRV32E \u306e syscall_id = \"t0\" \u30fb\u305d\u306e\u4ed6\u306e syscall_id = \"a7\" \u3053\u306e\u305f\u3081\u3001run \u3092 RV32E \u306e syscall \u306b\u5bfe\u5fdc\u3055\u305b\u308b patch \u3092\u7528\u610f\u3057\u305f\u3002 run \u5b9f\u884c\u6642\u3001 --model RV32E option \u3092\u3064\u3051\u308b\u3053\u3068\u3067 RV32E \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u3067\u304d\u308b\u3002 cross gdb \u3067 simulation \u5b9f\u884c\u3059\u308b\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3002 (gdb) target sim --model RV32E (gdb) load \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u30c4\u30fc\u30eb\u3001\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/bin/riscv32-unknown-elf-* # \u30b3\u30f3\u30d1\u30a4\u30e9\u3001\u30ea\u30f3\u30ab\u3001gdb etc /opt/rv32e/riscv32-unknown-elf/include/*.h # newlib \u6a19\u6e96\u30d8\u30c3\u30c0 /opt/rv32e/riscv32-unknown-elf/lib/libc.a libm.a ... # newlib \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/riscv32-unknown-elf/lib/ldscripts/elf32lriscv.x* # \u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 /opt/rv32e/lib/gcc/riscv32-unknown-elf/9.2.0/libgcc.a # gcc \u4e0b\u4f4d\u95a2\u6570(soft-float etc) \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u3067 RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb flag -march=rv32emc -mabi=ilp32e \u3092\u4e0e\u3048\u308b $ /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -c c_source.c Note rv_core \u306f gcc ver 9.2.0 \u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3063\u305f gcc ver 11.1.0 \u3067\u306f\u52d5\u4f5c\u4e0d\u5177\u5408\u304c\u767a\u751f\u3057\u305f\u304c\u3001\u539f\u56e0\u4e0d\u660e rvsim (ISS) \u00b6 $ sudo apt install binutils-dev libreadline8 libtinfo6 libncurses-dev libreadline-dev $ git clone https://github.com/shin-yamashita/rv32emc $ cd rv32emc/rvsim $ make $ sudo make install # -> /usr/local/bin/rvsim Target board \u00b6 Ultra96-v2 \u00b6 \u30dc\u30fc\u30c9\u60c5\u5831: AVNET Ultra96 Vivado board files: Avnet Board Definition Files (BDF) PYNQ V2.7 Pre-built SD image v2.7 for Ultra96 version 2 Download : Ultra96v1-2.7.0.zip Use Etcher to image it onto 32GB Micro SD Card PYNQ Linux, based on Ubuntu 20.04 pynq ttyPS0 pynq login: xilinx (automatic login) Welcome to PYNQ Linux, based on Ubuntu 20.04 (GNU/Linux 5.4.0-xilinx-v2020.2 aarch64) Arty-A7-35T \u00b6 \u30dc\u30fc\u30c9\u60c5\u5831: Digilent Arty-A7 Reference Vivado board files: Vivado Board Files for Digilent FPGA Boards","title":"\u958b\u767a\u74b0\u5883"},{"location":"x_env.html#_1","text":"","title":"\u958b\u767a\u74b0\u5883"},{"location":"x_env.html#host","text":"Ubuntu 20.04 \u4e0a\u3067\u958b\u767a\u3092\u884c\u3063\u305f","title":"Host"},{"location":"x_env.html#fpga","text":"Vivado/2020.2 /opt/Xilinx/Vivado \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Vivado_Lab/2020.2 /opt/Xilinx/Vivado_Lab \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bf\u30fc\u30b2\u30c3\u30c8\u30dc\u30fc\u30c9\u3092 USB \u3067\u63a5\u7d9a\u3059\u308b\u30de\u30b7\u30f3\u304c Disk \u5bb9\u91cf\u4e0d\u8db3\u3067 Vivado \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u306a\u3044\u306e\u3067\u3001Vivado_Lab \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066 Host \u304b\u3089 remote \u3067\u5236\u5fa1\u3057\u305f","title":"FPGA \u958b\u767a\u30c4\u30fc\u30eb"},{"location":"x_env.html#riscv32-gcc-for-rv32emc","text":"RISC-V \u306e RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d3\u30eb\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb $ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk \\ build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev # gcc \u306e build \u3067\u5fc5\u8981\u3068\u306a\u308b\u30c4\u30fc\u30eb Prerequisites $ sudo mkdir /opt/rv32e # cross tool \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148 $ git clone --branch rvv-0.9.x --recursive https://github.com/riscv/riscv-gnu-toolchain $ cd riscv-gnu-toolchain $ patch -p1 < riscv-gdb-sim.patch # run \u306e\u4fee\u6b63 patch $ ./configure --prefix = /opt/rv32e --disable-linux --with-arch = rv32emac --with-abi = ilp32e $ make newlib # \u30c4\u30fc\u30eb\u7fa4\u3092 /opt/rv32e/ \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3001\u66f8\u304d\u8fbc\u307f\u6a29\u9650\u304c\u5fc5\u8981 Download: riscv-gdb-sim.patch gdb \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u306e\u4fee\u6b63 patch cross gdb \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30bf run \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3002 run \u306e syscall \u306f RV32E \u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001write(), exit() \u306a\u3069\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002 newlib \u3067\u306f syscall \u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001RV32E \u306e\u307f syscall_id \u3092\u6e21\u3059\u30ec\u30b8\u30b9\u30bf\u304c\u7570\u306a\u308b\u3002 riscv-newlib/libgloss/riscv/internal_syscall.h \u30fbRV32E \u306e syscall_id = \"t0\" \u30fb\u305d\u306e\u4ed6\u306e syscall_id = \"a7\" \u3053\u306e\u305f\u3081\u3001run \u3092 RV32E \u306e syscall \u306b\u5bfe\u5fdc\u3055\u305b\u308b patch \u3092\u7528\u610f\u3057\u305f\u3002 run \u5b9f\u884c\u6642\u3001 --model RV32E option \u3092\u3064\u3051\u308b\u3053\u3068\u3067 RV32E \u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u3067\u304d\u308b\u3002 cross gdb \u3067 simulation \u5b9f\u884c\u3059\u308b\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3002 (gdb) target sim --model RV32E (gdb) load \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u30c4\u30fc\u30eb\u3001\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/bin/riscv32-unknown-elf-* # \u30b3\u30f3\u30d1\u30a4\u30e9\u3001\u30ea\u30f3\u30ab\u3001gdb etc /opt/rv32e/riscv32-unknown-elf/include/*.h # newlib \u6a19\u6e96\u30d8\u30c3\u30c0 /opt/rv32e/riscv32-unknown-elf/lib/libc.a libm.a ... # newlib \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea /opt/rv32e/riscv32-unknown-elf/lib/ldscripts/elf32lriscv.x* # \u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 /opt/rv32e/lib/gcc/riscv32-unknown-elf/9.2.0/libgcc.a # gcc \u4e0b\u4f4d\u95a2\u6570(soft-float etc) \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u3067 RV32EMC \u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb flag -march=rv32emc -mabi=ilp32e \u3092\u4e0e\u3048\u308b $ /opt/rv32e/bin/riscv32-unknown-elf-gcc -g -Wall -O2 -march = rv32emc -mabi = ilp32e -c c_source.c Note rv_core \u306f gcc ver 9.2.0 \u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3063\u305f gcc ver 11.1.0 \u3067\u306f\u52d5\u4f5c\u4e0d\u5177\u5408\u304c\u767a\u751f\u3057\u305f\u304c\u3001\u539f\u56e0\u4e0d\u660e","title":"\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9 riscv32 gcc (for rv32emc)"},{"location":"x_env.html#rvsim-iss","text":"$ sudo apt install binutils-dev libreadline8 libtinfo6 libncurses-dev libreadline-dev $ git clone https://github.com/shin-yamashita/rv32emc $ cd rv32emc/rvsim $ make $ sudo make install # -> /usr/local/bin/rvsim","title":"rvsim (ISS)"},{"location":"x_env.html#target-board","text":"","title":"Target board"},{"location":"x_env.html#ultra96-v2","text":"\u30dc\u30fc\u30c9\u60c5\u5831: AVNET Ultra96 Vivado board files: Avnet Board Definition Files (BDF) PYNQ V2.7 Pre-built SD image v2.7 for Ultra96 version 2 Download : Ultra96v1-2.7.0.zip Use Etcher to image it onto 32GB Micro SD Card PYNQ Linux, based on Ubuntu 20.04 pynq ttyPS0 pynq login: xilinx (automatic login) Welcome to PYNQ Linux, based on Ubuntu 20.04 (GNU/Linux 5.4.0-xilinx-v2020.2 aarch64)","title":"Ultra96-v2"},{"location":"x_env.html#arty-a7-35t","text":"\u30dc\u30fc\u30c9\u60c5\u5831: Digilent Arty-A7 Reference Vivado board files: Vivado Board Files for Digilent FPGA Boards","title":"Arty-A7-35T"}]}