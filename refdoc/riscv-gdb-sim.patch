diff --git a/riscv-gdb/sim/riscv/sim-main.c b/riscv-gdb/sim/riscv/sim-main.c
index 293c24e5a2..986257f110 100644
--- a/riscv-gdb/sim/riscv/sim-main.c
+++ b/riscv-gdb/sim/riscv/sim-main.c
@@ -1289,6 +1289,8 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)
   unsigned_word shamt_imm = ((iw >> OP_SH_SHAMT) & OP_MASK_SHAMT);
   unsigned_word tmp;
   sim_cia pc = cpu->pc + 4;
+  unsigned_word scfunc = (MODEL_NAME (CPU_MODEL (cpu))[4]) == 'E' ? cpu->t0 : cpu->a7;
+
 
   TRACE_EXTRACT (cpu, "rd:%-2i:%-4s  rs1:%-2i:%-4s %0*"PRIxTW"  rs2:%-2i:%-4s %0*"PRIxTW"  match:%#x mask:%#x",
 		 rd, rd_name,
@@ -1744,7 +1746,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)
       break;
     case MATCH_ECALL:
       TRACE_INSN (cpu, "ecall;");
-      if (cb_target_to_host_syscall (STATE_CALLBACK (sd), cpu->a7) == -1)
+      if (cb_target_to_host_syscall (STATE_CALLBACK (sd), scfunc) == -1)
 	{
 	  host_callback *cb = STATE_CALLBACK (sd);
 	  CB_SYSCALL sc;
@@ -1755,14 +1757,14 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)
 	  sc.arg2 = cpu->a1;
 	  sc.arg3 = cpu->a2;
 	  sc.arg4 = cpu->a3;
-	  sc.func = cpu->a7;
+	  sc.func = scfunc;
 
 	  sc.p1 = (PTR) sd;
 	  sc.p2 = (PTR) cpu;
 	  sc.read_mem = sim_syscall_read_mem;
 	  sc.write_mem = sim_syscall_write_mem;
 
-	  switch (cpu->a7)
+	  switch (scfunc)
 	    {
 #ifndef __MINGW32__
 	    case TARGET_SYS_link:
@@ -1815,13 +1817,13 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)
 		break;
 	      }
 	    default:
-	      cpu->a0 = sim_syscall (cpu, cpu->a7, cpu->a0,
+	      cpu->a0 = sim_syscall (cpu, scfunc, cpu->a0,
 				     cpu->a1, cpu->a2, cpu->a3);
 	      break;
 	    }
 	}
       else
-	cpu->a0 = sim_syscall (cpu, cpu->a7, cpu->a0, cpu->a1, cpu->a2, cpu->a3);
+	cpu->a0 = sim_syscall (cpu, scfunc, cpu->a0, cpu->a1, cpu->a2, cpu->a3);
       break;
     default:
       TRACE_INSN (cpu, "UNHANDLED INSN: %s", op->name);
